2019-04-06 19:06:20,287 mydb.py[line: 37] ERROR: 初始化数据连接失败：2003: Can't connect to MySQL server on '10.202.200.166:3306' (10060 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。)
2019-04-06 19:07:05,079 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:07:05,080 main.py[line: 19] INFO: 当前运行模式为：debug
2019-04-06 19:07:05,080 main.py[line: 22] INFO: 当前运行计划编号为：1
2019-04-06 19:07:05,080 main.py[line: 67] INFO: 调试模式
2019-04-06 19:07:07,109 debug.py[line: 27] INFO: 正在查询项目[ID：1]相关信息
2019-04-06 19:07:07,110 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：('1',)
2019-04-06 19:07:07,111 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:07:07,121 debug.py[line: 33] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:07:07,122 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE  locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:07:07,306 debug.py[line: 55] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:07:07,306 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('1', project_id) != 0 AND locate('1', env_id) != 0   data：
2019-04-06 19:07:07,325 debug.py[line: 82] INFO: 正在查询输入ID标识的用例(套件)相关信息
2019-04-06 19:07:07,326 mydb.py[line: 122] INFO: query：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 2  data：
2019-04-06 19:07:07,326 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 2
2019-04-06 19:07:07,351 mydb.py[line: 152] INFO: query：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND parent_id = 2  AND id NOT IN (SELECT parent_id FROM `website_api_case_tree` WHERE project_id=1)ORDER BY `order` ASC  data：
2019-04-06 19:07:07,362 debug.py[line: 107] INFO: 输入ID标识的是测试用例，开始执行用例
2019-04-06 19:07:07,363 debug.py[line: 109] INFO: ======================开始运行测试用例[名称：ID2-N_获取时间和日期, ID:2]======================
2019-04-06 19:07:07,363 test_case.py[line: 32] INFO: 正在查询测试用例[ID：2, 名称：ID2-N_获取时间和日期]关联的测试步骤
2019-04-06 19:07:07,364 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(2,)
2019-04-06 19:07:07,407 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:07:07,408 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 1,  用例ID：2, 用例名称：ID2-N_获取时间和日期）======================
2019-04-06 19:07:07,408 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:07:07,408 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:07:07,408 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:07:07,408 test_case_step.py[line: 169] INFO: 正在替换“请求头”中的动态参数
2019-04-06 19:07:07,418 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:07,419 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:07,419 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：{
  "fdafa": 13000
}
2019-04-06 19:07:07,419 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:07:07,419 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:07,420 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:07,420 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:07:07,420 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:07:07,421 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:07,421 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:07,421 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:07:07,421 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:07,422 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:07,422 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:07:07,422 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:07:07,422 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:07,422 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:07,423 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:07:07,424 httpprotocol.py[line: 96] INFO: 发起的请求为：GET http://192.168.0.103:8000/action/getDateAndTime
2019-04-06 19:07:07,424 httpprotocol.py[line: 97] INFO: 请求头为：OrderedDict([('fdafa', 13000)])
2019-04-06 19:07:07,880 APIUnittestTestCase.py[line: 147] INFO: 正在对服务器返回body进行解码
2019-04-06 19:07:07,881 APIUnittestTestCase.py[line: 166] INFO: 服务器返回结果"响应体(body)": {"pre_weekday7_yyyymmdd": "20190324", "pre_weekday1_yyyy_mm_dd": "2019-03-18", "current_month_yyyy_mm": "2019-04", "last_weekday1_to_weekday7_yyyymmdd": "20190325-20190331", "curmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "today_yyyy_mm_dd": "2019-04-06", "recent_7day_range_yyyy_mm_dd": "2019-03-30-2019-04-05", "current_month_last_year_yyyy_mm": "2018-04", "curmonth_final_day_yyyy_mm_dd": "2019-04-30", "curmonth_final_day_yyyymmdd": "20190430", "pre_weekday7_yyyy_mm_dd": "2019-03-24", "curtime": "2019-04-06 19:07:07", "current_month_yyyymm": "201904", "recent_30day_range_yyyy_mm_dd": "20190307-20190405", "last_weekday7_yyyy_mm_dd": "2019-03-31", "last_month_yyyy_mm": "2019-03", "last_week_num_yyyyno": "201913", "weekday1_to_weekday7_yyyymmdd": "20190401-20190407", "last_month_first_day_yyyy_mm_dd": "2019-03-01", "last_weekday7_yyyymmdd": "20190331", "last_month_yyyymm": "201903", "last_weekday1_yyyymmdd": "20190325", "recent_30day_range_yyyymmdd": "2019-03-07-2019-04-05", "millisecond_for_yesterday": 1554393600000, "current_week_num_yyyymm": "201914", "current_week_num_yyyy_mm": "2019-14", "weekday7_yyyy_mm_dd": "20190407", "curmonth_first_day_yyyymmdd": "20190401", "last_month_first_day_yyyymmdd": "20190301", "curmonth_first_day_yyyy_mm_dd": "2019-04-01", "next_month_first_day_yyyy_mm_dd": "2019-05-01", "yesterday_yyyymmdd": "20190405", "recent_7day_range_yyyymmdd": "20190330-20190405", "lastmonth_range_yyyymmdd": "20190401-20190430", "last_month_final_day_yyyy_mm_dd": "2019-03-31", "millisecond_for_curdate": 1554480000000, "weekday7_yyyymmdd": "20190407", "last_weekday1_yyyy_mm_dd": "2019-03-25", "next_month_first_day_yyyymmdd": "20190501", "december_month_last_year_yyyy_mm": "2018-12", "weekday1_to_weekday7_yyyy_mm_dd": "20190401-20190407", "weekday1_yyyy_mm_dd": "20190401", "december_month_last_year_yyyymm": "201812", "weekday1_yyyymmdd": "20190401", "curtime_puls10s": "2019-04-06 19:07:17", "yesterday_yyyy_mm_dd": "2019-04-05", "last_month_final_day_yyyymmdd": "20190331", "last_weekday1_to_weekday7_yyyy_mm_dd": "2019-03-25-2019-03-31", "lastmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "millisecond_for_curtime": 1554548827000, "curmonth_range_yyyymmdd": "20190401-20190430", "pre_weekday1_yyyymmdd": "20190318", "current_month_last_year_yyyymm": "2018-04", "today_yyyymmdd": "20190406"}
2019-04-06 19:07:07,882 APIUnittestTestCase.py[line: 167] INFO: 服务器返回结果"请求头(headers)": [('Content-Type', 'text/html; charset=utf-8'), ('Connection', 'close'), ('X-Frame-Options', 'SAMEORIGIN'), ('Content-Length', '2339')]
2019-04-06 19:07:07,882 APIUnittestTestCase.py[line: 168] INFO: 服务器返回结果"状态码(code)": 200
2019-04-06 19:07:07,882 APIUnittestTestCase.py[line: 173] INFO: 正在提取目标返回结果值
2019-04-06 19:07:07,882 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,882 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,882 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25
2019-04-06 19:07:07,883 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25
2019-04-06 19:07:07,883 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyy_mm_dd-2019-03-25
2019-04-06 19:07:07,883 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,883 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyymm', 'value']
2019-04-06 19:07:07,883 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201903
2019-04-06 19:07:07,883 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201903
2019-04-06 19:07:07,883 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyymm-201903
2019-04-06 19:07:07,884 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,884 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:07,884 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:07:07,884 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:07:07,884 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyymmdd-20190331
2019-04-06 19:07:07,884 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,885 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyymm', 'value']
2019-04-06 19:07:07,885 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:07:07,885 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:07:07,885 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyymm-2018-04
2019-04-06 19:07:07,885 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,885 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyymmdd', 'value']
2019-04-06 19:07:07,885 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:07:07,886 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:07:07,886 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyymmdd-20190407
2019-04-06 19:07:07,886 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,886 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyymmdd', 'value']
2019-04-06 19:07:07,886 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:07:07,886 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:07:07,886 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:07:07,887 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,887 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,887 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:07:07,887 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:07:07,887 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyy_mm_dd-2019-03-31
2019-04-06 19:07:07,887 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,887 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyy_mm', 'value']
2019-04-06 19:07:07,888 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04
2019-04-06 19:07:07,889 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04
2019-04-06 19:07:07,889 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyy_mm-2019-04
2019-04-06 19:07:07,889 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,889 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyy_mm', 'value']
2019-04-06 19:07:07,890 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-14
2019-04-06 19:07:07,890 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-14
2019-04-06 19:07:07,890 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyy_mm-2019-14
2019-04-06 19:07:07,890 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,890 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:07,890 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325-20190331
2019-04-06 19:07:07,890 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325-20190331
2019-04-06 19:07:07,891 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyymmdd-20190325-20190331
2019-04-06 19:07:07,891 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,891 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyymmdd', 'value']
2019-04-06 19:07:07,891 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:07:07,891 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:07:07,891 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:07:07,891 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,892 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,892 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01
2019-04-06 19:07:07,892 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01
2019-04-06 19:07:07,892 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyy_mm_dd-2019-04-01
2019-04-06 19:07:07,892 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,892 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyymmdd', 'value']
2019-04-06 19:07:07,892 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190405
2019-04-06 19:07:07,893 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190405
2019-04-06 19:07:07,893 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyymmdd-20190405
2019-04-06 19:07:07,893 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,893 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_week_num_yyyyno', 'value']
2019-04-06 19:07:07,893 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201913
2019-04-06 19:07:07,893 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201913
2019-04-06 19:07:07,893 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_week_num_yyyyno-201913
2019-04-06 19:07:07,894 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,894 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,896 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-18
2019-04-06 19:07:07,896 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-18
2019-04-06 19:07:07,896 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyy_mm_dd-2019-03-18
2019-04-06 19:07:07,896 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,896 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyymmdd', 'value']
2019-04-06 19:07:07,896 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190406
2019-04-06 19:07:07,897 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190406
2019-04-06 19:07:07,897 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyymmdd-20190406
2019-04-06 19:07:07,897 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,897 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyymmdd', 'value']
2019-04-06 19:07:07,897 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190330-20190405
2019-04-06 19:07:07,898 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190330-20190405
2019-04-06 19:07:07,898 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyymmdd-20190330-20190405
2019-04-06 19:07:07,898 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,898 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,898 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:07:07,898 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:07:07,898 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyy_mm_dd-20190407
2019-04-06 19:07:07,898 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,899 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyymm', 'value']
2019-04-06 19:07:07,899 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201914
2019-04-06 19:07:07,899 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201914
2019-04-06 19:07:07,899 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyymm-201914
2019-04-06 19:07:07,899 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,899 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:07,899 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190324
2019-04-06 19:07:07,900 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190324
2019-04-06 19:07:07,900 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyymmdd-20190324
2019-04-06 19:07:07,900 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,900 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,900 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-24
2019-04-06 19:07:07,900 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-24
2019-04-06 19:07:07,900 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyy_mm_dd-2019-03-24
2019-04-06 19:07:07,901 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,901 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,907 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-30-2019-04-05
2019-04-06 19:07:07,908 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-30-2019-04-05
2019-04-06 19:07:07,908 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyy_mm_dd-2019-03-30-2019-04-05
2019-04-06 19:07:07,908 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,908 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyymmdd', 'value']
2019-04-06 19:07:07,908 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:07:07,908 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:07:07,908 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyymmdd-20190401
2019-04-06 19:07:07,909 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,909 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyy_mm', 'value']
2019-04-06 19:07:07,909 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-12
2019-04-06 19:07:07,909 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-12
2019-04-06 19:07:07,909 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyy_mm-2018-12
2019-04-06 19:07:07,909 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,909 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,910 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-01
2019-04-06 19:07:07,910 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-01
2019-04-06 19:07:07,910 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyy_mm_dd-2019-03-01
2019-04-06 19:07:07,910 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,910 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyymmdd', 'value']
2019-04-06 19:07:07,911 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:07:07,911 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:07:07,911 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyymmdd-20190401
2019-04-06 19:07:07,911 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,911 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyymmdd', 'value']
2019-04-06 19:07:07,912 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:07:07,912 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:07:07,912 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyymmdd-20190331
2019-04-06 19:07:07,912 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,912 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyymm', 'value']
2019-04-06 19:07:07,913 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201904
2019-04-06 19:07:07,913 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201904
2019-04-06 19:07:07,913 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyymm-201904
2019-04-06 19:07:07,913 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,915 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyymmdd', 'value']
2019-04-06 19:07:07,916 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190318
2019-04-06 19:07:07,916 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190318
2019-04-06 19:07:07,916 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyymmdd-20190318
2019-04-06 19:07:07,916 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,916 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyymmdd', 'value']
2019-04-06 19:07:07,916 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325
2019-04-06 19:07:07,916 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325
2019-04-06 19:07:07,917 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyymmdd-20190325
2019-04-06 19:07:07,917 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,917 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime_puls10s', 'value']
2019-04-06 19:07:07,917 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:07:17
2019-04-06 19:07:07,917 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:07:17
2019-04-06 19:07:07,917 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime_puls10s-2019-04-06 19:07:17
2019-04-06 19:07:07,917 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,918 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,918 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:07:07,918 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:07:07,919 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:07:07,919 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,919 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,919 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:07:07,919 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:07:07,920 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyy_mm_dd-20190401
2019-04-06 19:07:07,920 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,920 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,920 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:07:07,920 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:07:07,920 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:07:07,920 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,921 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,921 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-30
2019-04-06 19:07:07,921 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-30
2019-04-06 19:07:07,921 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyy_mm_dd-2019-04-30
2019-04-06 19:07:07,921 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,921 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,921 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-05-01
2019-04-06 19:07:07,922 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-05-01
2019-04-06 19:07:07,922 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyy_mm_dd-2019-05-01
2019-04-06 19:07:07,922 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,922 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyymmdd', 'value']
2019-04-06 19:07:07,922 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-07-2019-04-05
2019-04-06 19:07:07,922 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-07-2019-04-05
2019-04-06 19:07:07,923 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyymmdd-2019-03-07-2019-04-05
2019-04-06 19:07:07,923 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,923 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyymmdd', 'value']
2019-04-06 19:07:07,923 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190301
2019-04-06 19:07:07,923 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190301
2019-04-06 19:07:07,923 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyymmdd-20190301
2019-04-06 19:07:07,923 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,924 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,924 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-05
2019-04-06 19:07:07,924 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-05
2019-04-06 19:07:07,924 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyy_mm_dd-2019-04-05
2019-04-06 19:07:07,924 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,924 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyy_mm', 'value']
2019-04-06 19:07:07,925 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:07:07,925 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:07:07,925 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyy_mm-2018-04
2019-04-06 19:07:07,925 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,925 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,925 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:07:07,925 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:07:07,926 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyy_mm_dd-2019-03-31
2019-04-06 19:07:07,926 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,926 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curtime', 'value']
2019-04-06 19:07:07,926 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554548827000
2019-04-06 19:07:07,926 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554548827000
2019-04-06 19:07:07,926 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curtime-1554548827000
2019-04-06 19:07:07,926 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,927 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,927 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25-2019-03-31
2019-04-06 19:07:07,927 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25-2019-03-31
2019-04-06 19:07:07,927 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyy_mm_dd-2019-03-25-2019-03-31
2019-04-06 19:07:07,927 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,927 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyymm', 'value']
2019-04-06 19:07:07,928 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201812
2019-04-06 19:07:07,928 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201812
2019-04-06 19:07:07,928 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyymm-201812
2019-04-06 19:07:07,928 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,928 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyymmdd', 'value']
2019-04-06 19:07:07,929 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190430
2019-04-06 19:07:07,929 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190430
2019-04-06 19:07:07,929 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyymmdd-20190430
2019-04-06 19:07:07,929 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,929 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_yesterday', 'value']
2019-04-06 19:07:07,929 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554393600000
2019-04-06 19:07:07,929 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554393600000
2019-04-06 19:07:07,930 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_yesterday-1554393600000
2019-04-06 19:07:07,930 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,930 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime', 'value']
2019-04-06 19:07:07,930 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:07:07
2019-04-06 19:07:07,931 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:07:07
2019-04-06 19:07:07,931 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime-2019-04-06 19:07:07
2019-04-06 19:07:07,931 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,931 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,931 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:07:07,931 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:07:07,932 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyy_mm_dd-20190401-20190407
2019-04-06 19:07:07,932 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,932 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyymmdd', 'value']
2019-04-06 19:07:07,932 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190501
2019-04-06 19:07:07,932 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190501
2019-04-06 19:07:07,933 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyymmdd-20190501
2019-04-06 19:07:07,933 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,933 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curdate', 'value']
2019-04-06 19:07:07,933 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554480000000
2019-04-06 19:07:07,933 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554480000000
2019-04-06 19:07:07,934 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curdate-1554480000000
2019-04-06 19:07:07,934 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,934 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:07,934 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:07:07,934 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:07:07,935 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyymmdd-20190401-20190407
2019-04-06 19:07:07,935 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,935 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,935 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190307-20190405
2019-04-06 19:07:07,935 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190307-20190405
2019-04-06 19:07:07,935 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyy_mm_dd-20190307-20190405
2019-04-06 19:07:07,935 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,936 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyy_mm', 'value']
2019-04-06 19:07:07,936 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03
2019-04-06 19:07:07,936 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03
2019-04-06 19:07:07,936 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyy_mm-2019-03
2019-04-06 19:07:07,936 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:07,936 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyy_mm_dd', 'value']
2019-04-06 19:07:07,936 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06
2019-04-06 19:07:07,937 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06
2019-04-06 19:07:07,937 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyy_mm_dd-2019-04-06
2019-04-06 19:07:07,937 APIUnittestTestCase.py[line: 176] INFO: 正在执行断言
2019-04-06 19:07:07,937 unittesttestcase.py[line: 35] INFO: 正在替换“校验模式”中的动态参数
2019-04-06 19:07:07,937 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:07,937 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_yyyymm': '201903', 'last_weekday7_yyyymmdd': '20190331', 'current_month_last_year_yyyymm': '2018-04', 'weekday7_yyyymmdd': '20190407', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'current_month_yyyy_mm': '2019-04', 'current_week_num_yyyy_mm': '2019-14', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'yesterday_yyyymmdd': '20190405', 'last_week_num_yyyyno': '201913', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'today_yyyymmdd': '20190406', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'weekday7_yyyy_mm_dd': '20190407', 'current_week_num_yyyymm': '201914', 'pre_weekday7_yyyymmdd': '20190324', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'weekday1_yyyymmdd': '20190401', 'december_month_last_year_yyyy_mm': '2018-12', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'curmonth_first_day_yyyymmdd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'current_month_yyyymm': '201904', 'pre_weekday1_yyyymmdd': '20190318', 'last_weekday1_yyyymmdd': '20190325', 'curtime_puls10s': '2019-04-06 19:07:17', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'weekday1_yyyy_mm_dd': '20190401', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_month_first_day_yyyymmdd': '20190301', 'yesterday_yyyy_mm_dd': '2019-04-05', 'current_month_last_year_yyyy_mm': '2018-04', 'millisecond_for_curtime': 1554548827000, 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'december_month_last_year_yyyymm': '201812', 'curmonth_final_day_yyyymmdd': '20190430', 'millisecond_for_yesterday': 1554393600000, 'curtime': '2019-04-06 19:07:07', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'next_month_first_day_yyyymmdd': '20190501', 'millisecond_for_curdate': 1554480000000, 'today_yyyy_mm_dd': '2019-04-06', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'last_month_yyyy_mm': '2019-03', 'last_weekday7_yyyy_mm_dd': '2019-03-31'}
2019-04-06 19:07:07,938 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：[
  {
    "模式": "curtime",
    "消息": "fail#请求失败"
  }
]
2019-04-06 19:07:07,938 unittesttestcase.py[line: 38] INFO: 正在替换“校验模式”中的插件函数
2019-04-06 19:07:07,938 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:07,938 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:07,938 unittesttestcase.py[line: 82] INFO: 校验规则为：“包含字符串：curtime”
2019-04-06 19:07:07,939 debug.py[line: 134] INFO: 正在释放资源
2019-04-06 19:07:07,939 debug.py[line: 135] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:07:07,939 debug.py[line: 141] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:07:17,159 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:07:17,159 main.py[line: 19] INFO: 当前运行模式为：debug
2019-04-06 19:07:17,159 main.py[line: 22] INFO: 当前运行计划编号为：1
2019-04-06 19:07:17,159 main.py[line: 67] INFO: 调试模式
2019-04-06 19:07:25,997 debug.py[line: 27] INFO: 正在查询项目[ID：1]相关信息
2019-04-06 19:07:25,998 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：('1',)
2019-04-06 19:07:25,998 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:07:26,002 debug.py[line: 33] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:07:26,002 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE  locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:07:26,005 debug.py[line: 55] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:07:26,006 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('1', project_id) != 0 AND locate('1', env_id) != 0   data：
2019-04-06 19:07:26,008 debug.py[line: 82] INFO: 正在查询输入ID标识的用例(套件)相关信息
2019-04-06 19:07:26,008 mydb.py[line: 122] INFO: query：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 14  data：
2019-04-06 19:07:26,009 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 14
2019-04-06 19:07:26,011 debug.py[line: 118] WARNING: 未查找到相关信息，请检查配置的项目ID(%s)，用例(套件)标识ID(%s)是否正确
2019-04-06 19:07:26,011 debug.py[line: 134] INFO: 正在释放资源
2019-04-06 19:07:26,011 debug.py[line: 135] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:07:26,012 debug.py[line: 141] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:07:33,262 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:07:33,263 main.py[line: 19] INFO: 当前运行模式为：debug
2019-04-06 19:07:33,263 main.py[line: 22] INFO: 当前运行计划编号为：1
2019-04-06 19:07:33,263 main.py[line: 67] INFO: 调试模式
2019-04-06 19:07:34,816 debug.py[line: 27] INFO: 正在查询项目[ID：1]相关信息
2019-04-06 19:07:34,816 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：('1',)
2019-04-06 19:07:34,817 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:07:34,821 debug.py[line: 33] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:07:34,822 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE  locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:07:34,857 debug.py[line: 55] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:07:34,858 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('1', project_id) != 0 AND locate('1', env_id) != 0   data：
2019-04-06 19:07:34,877 debug.py[line: 82] INFO: 正在查询输入ID标识的用例(套件)相关信息
2019-04-06 19:07:34,877 mydb.py[line: 122] INFO: query：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 4  data：
2019-04-06 19:07:34,877 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 4
2019-04-06 19:07:34,887 mydb.py[line: 152] INFO: query：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND parent_id = 4  AND id NOT IN (SELECT parent_id FROM `website_api_case_tree` WHERE project_id=1)ORDER BY `order` ASC  data：
2019-04-06 19:07:34,903 debug.py[line: 107] INFO: 输入ID标识的是测试用例，开始执行用例
2019-04-06 19:07:34,903 debug.py[line: 109] INFO: ======================开始运行测试用例[名称：ID4-N_获取时间和日期, ID:4]======================
2019-04-06 19:07:34,903 test_case.py[line: 32] INFO: 正在查询测试用例[ID：4, 名称：ID4-N_获取时间和日期]关联的测试步骤
2019-04-06 19:07:34,903 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(4,)
2019-04-06 19:07:34,987 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:07:34,987 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 2,  用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:07:34,988 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:07:34,988 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:07:34,989 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:07:34,989 test_case_step.py[line: 203] INFO: 正在替换“输入参数”中的动态参数
2019-04-06 19:07:34,990 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:34,990 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:34,991 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：${__read_file("emailPic.png", "rb")}
2019-04-06 19:07:34,991 test_case_step.py[line: 206] INFO: 正在替换“输入参数”中的插件函数
2019-04-06 19:07:34,992 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:['${__read_file("emailPic.png", "rb")}']
2019-04-06 19:07:34,992 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:34,993 test_case_step.py[line: 141] INFO: 正在替换插件函数：${__read_file("emailPic.png", "rb")}
2019-04-06 19:07:34,995 pluginfunc.py[line: 31] INFO: 待读取的文件路径为：D:\interface_project_for_dev\testdata\emailPic.png
2019-04-06 19:07:34,996 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:07:34,997 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:34,997 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:34,997 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:07:34,998 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:07:34,998 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:34,998 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:34,999 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:07:35,000 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:35,000 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:35,001 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:07:35,001 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:07:35,001 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:35,002 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:35,003 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:07:38,008 test_case.py[line: 104] ERROR: 执行用例测试步骤失败，正在进行第 1 次重试（第 1 步, 步骤ID: 2, 用例ID：4, 用例名称：ID4-N_获取时间和日期）
2019-04-06 19:07:38,009 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:07:38,009 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:07:38,009 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:07:38,009 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:07:38,010 test_case.py[line: 112] ERROR: 执行用例测试步骤运行失败（第 1 步, 步骤ID: 2， 用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:07:38,010 debug.py[line: 134] INFO: 正在释放资源
2019-04-06 19:07:38,010 debug.py[line: 135] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:07:38,010 debug.py[line: 141] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:07:49,536 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:07:49,537 main.py[line: 19] INFO: 当前运行模式为：debug
2019-04-06 19:07:49,537 main.py[line: 22] INFO: 当前运行计划编号为：1
2019-04-06 19:07:49,537 main.py[line: 67] INFO: 调试模式
2019-04-06 19:07:55,020 debug.py[line: 27] INFO: 正在查询项目[ID：1]相关信息
2019-04-06 19:07:55,020 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：('1',)
2019-04-06 19:07:55,020 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:07:55,024 debug.py[line: 33] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:07:55,024 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE  locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:07:55,027 debug.py[line: 55] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:07:55,027 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('1', project_id) != 0 AND locate('1', env_id) != 0   data：
2019-04-06 19:07:55,030 debug.py[line: 82] INFO: 正在查询输入ID标识的用例(套件)相关信息
2019-04-06 19:07:55,031 mydb.py[line: 122] INFO: query：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 1  data：
2019-04-06 19:07:55,031 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND id = 1
2019-04-06 19:07:55,033 mydb.py[line: 152] INFO: query：SELECT id, text FROM `website_api_case_tree` WHERE project_id = 1 AND parent_id = 1  AND id NOT IN (SELECT parent_id FROM `website_api_case_tree` WHERE project_id=1)ORDER BY `order` ASC  data：
2019-04-06 19:07:55,061 debug.py[line: 96] INFO: 输入ID标识的是测试套件
2019-04-06 19:07:55,061 debug.py[line: 101] INFO: ======================开始运行测试用例[名称：ID2-N_获取时间和日期, ID:2]======================
2019-04-06 19:07:55,061 test_case.py[line: 32] INFO: 正在查询测试用例[ID：2, 名称：ID2-N_获取时间和日期]关联的测试步骤
2019-04-06 19:07:55,061 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(2,)
2019-04-06 19:07:55,064 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:07:55,064 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 1,  用例ID：2, 用例名称：ID2-N_获取时间和日期）======================
2019-04-06 19:07:55,064 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:07:55,064 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:07:55,065 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:07:55,065 test_case_step.py[line: 169] INFO: 正在替换“请求头”中的动态参数
2019-04-06 19:07:55,065 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:55,065 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:55,065 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：{
  "fdafa": 13000
}
2019-04-06 19:07:55,066 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:07:55,066 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:55,066 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:55,066 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:07:55,066 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:07:55,067 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:55,067 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:55,067 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:07:55,067 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:55,067 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:07:55,067 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:07:55,067 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:07:55,068 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:55,068 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:55,068 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:07:55,068 httpprotocol.py[line: 96] INFO: 发起的请求为：GET http://192.168.0.103:8000/action/getDateAndTime
2019-04-06 19:07:55,069 httpprotocol.py[line: 97] INFO: 请求头为：OrderedDict([('fdafa', 13000)])
2019-04-06 19:07:55,505 APIUnittestTestCase.py[line: 147] INFO: 正在对服务器返回body进行解码
2019-04-06 19:07:55,506 APIUnittestTestCase.py[line: 166] INFO: 服务器返回结果"响应体(body)": {"pre_weekday7_yyyymmdd": "20190324", "pre_weekday1_yyyy_mm_dd": "2019-03-18", "current_month_yyyy_mm": "2019-04", "last_weekday1_to_weekday7_yyyymmdd": "20190325-20190331", "curmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "today_yyyy_mm_dd": "2019-04-06", "recent_7day_range_yyyy_mm_dd": "2019-03-30-2019-04-05", "current_month_last_year_yyyy_mm": "2018-04", "curmonth_final_day_yyyy_mm_dd": "2019-04-30", "curmonth_final_day_yyyymmdd": "20190430", "pre_weekday7_yyyy_mm_dd": "2019-03-24", "curtime": "2019-04-06 19:07:55", "current_month_yyyymm": "201904", "recent_30day_range_yyyy_mm_dd": "20190307-20190405", "last_weekday7_yyyy_mm_dd": "2019-03-31", "last_month_yyyy_mm": "2019-03", "last_week_num_yyyyno": "201913", "weekday1_to_weekday7_yyyymmdd": "20190401-20190407", "last_month_first_day_yyyy_mm_dd": "2019-03-01", "last_weekday7_yyyymmdd": "20190331", "last_month_yyyymm": "201903", "last_weekday1_yyyymmdd": "20190325", "recent_30day_range_yyyymmdd": "2019-03-07-2019-04-05", "millisecond_for_yesterday": 1554393600000, "current_week_num_yyyymm": "201914", "current_week_num_yyyy_mm": "2019-14", "weekday7_yyyy_mm_dd": "20190407", "curmonth_first_day_yyyymmdd": "20190401", "last_month_first_day_yyyymmdd": "20190301", "curmonth_first_day_yyyy_mm_dd": "2019-04-01", "next_month_first_day_yyyy_mm_dd": "2019-05-01", "yesterday_yyyymmdd": "20190405", "recent_7day_range_yyyymmdd": "20190330-20190405", "lastmonth_range_yyyymmdd": "20190401-20190430", "last_month_final_day_yyyy_mm_dd": "2019-03-31", "millisecond_for_curdate": 1554480000000, "weekday7_yyyymmdd": "20190407", "last_weekday1_yyyy_mm_dd": "2019-03-25", "next_month_first_day_yyyymmdd": "20190501", "december_month_last_year_yyyy_mm": "2018-12", "weekday1_to_weekday7_yyyy_mm_dd": "20190401-20190407", "weekday1_yyyy_mm_dd": "20190401", "december_month_last_year_yyyymm": "201812", "weekday1_yyyymmdd": "20190401", "curtime_puls10s": "2019-04-06 19:08:05", "yesterday_yyyy_mm_dd": "2019-04-05", "last_month_final_day_yyyymmdd": "20190331", "last_weekday1_to_weekday7_yyyy_mm_dd": "2019-03-25-2019-03-31", "lastmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "millisecond_for_curtime": 1554548875000, "curmonth_range_yyyymmdd": "20190401-20190430", "pre_weekday1_yyyymmdd": "20190318", "current_month_last_year_yyyymm": "2018-04", "today_yyyymmdd": "20190406"}
2019-04-06 19:07:55,507 APIUnittestTestCase.py[line: 167] INFO: 服务器返回结果"请求头(headers)": [('Content-Type', 'text/html; charset=utf-8'), ('Connection', 'close'), ('X-Frame-Options', 'SAMEORIGIN'), ('Content-Length', '2339')]
2019-04-06 19:07:55,507 APIUnittestTestCase.py[line: 168] INFO: 服务器返回结果"状态码(code)": 200
2019-04-06 19:07:55,507 APIUnittestTestCase.py[line: 173] INFO: 正在提取目标返回结果值
2019-04-06 19:07:55,507 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,507 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyymm', 'value']
2019-04-06 19:07:55,507 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201904
2019-04-06 19:07:55,508 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201904
2019-04-06 19:07:55,508 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyymm-201904
2019-04-06 19:07:55,508 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,508 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_week_num_yyyyno', 'value']
2019-04-06 19:07:55,508 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201913
2019-04-06 19:07:55,508 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201913
2019-04-06 19:07:55,508 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_week_num_yyyyno-201913
2019-04-06 19:07:55,510 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,510 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyymmdd', 'value']
2019-04-06 19:07:55,510 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:07:55,511 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:07:55,511 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:07:55,511 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,511 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,511 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06
2019-04-06 19:07:55,511 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06
2019-04-06 19:07:55,511 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyy_mm_dd-2019-04-06
2019-04-06 19:07:55,512 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,512 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyy_mm', 'value']
2019-04-06 19:07:55,512 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-12
2019-04-06 19:07:55,512 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-12
2019-04-06 19:07:55,512 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyy_mm-2018-12
2019-04-06 19:07:55,512 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,512 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,513 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-05-01
2019-04-06 19:07:55,513 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-05-01
2019-04-06 19:07:55,513 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyy_mm_dd-2019-05-01
2019-04-06 19:07:55,513 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,513 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyy_mm', 'value']
2019-04-06 19:07:55,514 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04
2019-04-06 19:07:55,514 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04
2019-04-06 19:07:55,514 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyy_mm-2019-04
2019-04-06 19:07:55,514 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,514 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,515 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:07:55,515 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:07:55,515 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyy_mm_dd-2019-03-31
2019-04-06 19:07:55,515 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,515 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,515 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-18
2019-04-06 19:07:55,515 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-18
2019-04-06 19:07:55,516 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyy_mm_dd-2019-03-18
2019-04-06 19:07:55,516 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,516 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,516 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25-2019-03-31
2019-04-06 19:07:55,516 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25-2019-03-31
2019-04-06 19:07:55,516 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyy_mm_dd-2019-03-25-2019-03-31
2019-04-06 19:07:55,517 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,517 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyymm', 'value']
2019-04-06 19:07:55,517 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201903
2019-04-06 19:07:55,517 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201903
2019-04-06 19:07:55,517 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyymm-201903
2019-04-06 19:07:55,517 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,517 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,518 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-30
2019-04-06 19:07:55,518 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-30
2019-04-06 19:07:55,518 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyy_mm_dd-2019-04-30
2019-04-06 19:07:55,518 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,518 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyy_mm', 'value']
2019-04-06 19:07:55,518 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:07:55,518 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:07:55,519 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyy_mm-2018-04
2019-04-06 19:07:55,519 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,519 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_yesterday', 'value']
2019-04-06 19:07:55,519 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554393600000
2019-04-06 19:07:55,519 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554393600000
2019-04-06 19:07:55,519 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_yesterday-1554393600000
2019-04-06 19:07:55,519 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,520 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curtime', 'value']
2019-04-06 19:07:55,520 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554548875000
2019-04-06 19:07:55,520 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554548875000
2019-04-06 19:07:55,520 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curtime-1554548875000
2019-04-06 19:07:55,520 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,520 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyy_mm', 'value']
2019-04-06 19:07:55,520 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03
2019-04-06 19:07:55,521 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03
2019-04-06 19:07:55,521 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyy_mm-2019-03
2019-04-06 19:07:55,521 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,521 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyymmdd', 'value']
2019-04-06 19:07:55,521 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:07:55,522 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:07:55,522 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyymmdd-20190401
2019-04-06 19:07:55,522 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,522 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyymmdd', 'value']
2019-04-06 19:07:55,522 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:07:55,523 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:07:55,523 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyymmdd-20190331
2019-04-06 19:07:55,523 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,523 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyymmdd', 'value']
2019-04-06 19:07:55,523 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:07:55,523 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:07:55,523 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyymmdd-20190401
2019-04-06 19:07:55,524 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,524 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,524 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-01
2019-04-06 19:07:55,524 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-01
2019-04-06 19:07:55,524 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyy_mm_dd-2019-03-01
2019-04-06 19:07:55,524 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,524 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,525 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25
2019-04-06 19:07:55,525 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25
2019-04-06 19:07:55,525 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyy_mm_dd-2019-03-25
2019-04-06 19:07:55,525 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,525 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime_puls10s', 'value']
2019-04-06 19:07:55,525 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:08:05
2019-04-06 19:07:55,525 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:08:05
2019-04-06 19:07:55,526 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime_puls10s-2019-04-06 19:08:05
2019-04-06 19:07:55,526 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,526 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,526 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:07:55,526 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:07:55,526 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyy_mm_dd-20190401-20190407
2019-04-06 19:07:55,526 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,527 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,527 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:07:55,527 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:07:55,527 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyy_mm_dd-20190401
2019-04-06 19:07:55,527 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,528 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyymm', 'value']
2019-04-06 19:07:55,528 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:07:55,528 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:07:55,528 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyymm-2018-04
2019-04-06 19:07:55,528 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,528 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,529 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01
2019-04-06 19:07:55,530 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01
2019-04-06 19:07:55,530 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyy_mm_dd-2019-04-01
2019-04-06 19:07:55,530 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,530 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:55,530 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:07:55,531 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:07:55,531 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyymmdd-20190401-20190407
2019-04-06 19:07:55,531 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,531 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,531 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:07:55,532 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:07:55,532 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:07:55,532 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,532 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyymm', 'value']
2019-04-06 19:07:55,532 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201914
2019-04-06 19:07:55,532 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201914
2019-04-06 19:07:55,532 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyymm-201914
2019-04-06 19:07:55,533 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,533 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyymmdd', 'value']
2019-04-06 19:07:55,533 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190405
2019-04-06 19:07:55,533 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190405
2019-04-06 19:07:55,533 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyymmdd-20190405
2019-04-06 19:07:55,533 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,533 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyymmdd', 'value']
2019-04-06 19:07:55,534 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-07-2019-04-05
2019-04-06 19:07:55,534 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-07-2019-04-05
2019-04-06 19:07:55,534 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyymmdd-2019-03-07-2019-04-05
2019-04-06 19:07:55,534 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,534 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,534 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-05
2019-04-06 19:07:55,534 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-05
2019-04-06 19:07:55,535 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyy_mm_dd-2019-04-05
2019-04-06 19:07:55,535 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,535 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:55,535 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190324
2019-04-06 19:07:55,535 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190324
2019-04-06 19:07:55,535 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyymmdd-20190324
2019-04-06 19:07:55,536 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,536 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyymmdd', 'value']
2019-04-06 19:07:55,536 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:07:55,536 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:07:55,536 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyymmdd-20190407
2019-04-06 19:07:55,536 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,537 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyymmdd', 'value']
2019-04-06 19:07:55,537 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:07:55,537 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:07:55,537 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:07:55,538 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,538 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,538 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-24
2019-04-06 19:07:55,538 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-24
2019-04-06 19:07:55,539 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyy_mm_dd-2019-03-24
2019-04-06 19:07:55,539 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,539 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyymmdd', 'value']
2019-04-06 19:07:55,540 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325
2019-04-06 19:07:55,540 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325
2019-04-06 19:07:55,540 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyymmdd-20190325
2019-04-06 19:07:55,540 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,541 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,541 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190307-20190405
2019-04-06 19:07:55,541 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190307-20190405
2019-04-06 19:07:55,541 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyy_mm_dd-20190307-20190405
2019-04-06 19:07:55,541 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,541 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyymmdd', 'value']
2019-04-06 19:07:55,542 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190318
2019-04-06 19:07:55,542 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190318
2019-04-06 19:07:55,542 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyymmdd-20190318
2019-04-06 19:07:55,542 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,542 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,542 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-30-2019-04-05
2019-04-06 19:07:55,542 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-30-2019-04-05
2019-04-06 19:07:55,543 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyy_mm_dd-2019-03-30-2019-04-05
2019-04-06 19:07:55,543 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,543 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyymmdd', 'value']
2019-04-06 19:07:55,543 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190301
2019-04-06 19:07:55,543 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190301
2019-04-06 19:07:55,543 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyymmdd-20190301
2019-04-06 19:07:55,543 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,544 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:55,544 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:07:55,544 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:07:55,544 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyymmdd-20190331
2019-04-06 19:07:55,544 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,544 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyymmdd', 'value']
2019-04-06 19:07:55,544 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190406
2019-04-06 19:07:55,545 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190406
2019-04-06 19:07:55,545 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyymmdd-20190406
2019-04-06 19:07:55,545 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,545 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,545 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:07:55,545 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:07:55,545 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:07:55,546 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,546 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,546 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:07:55,546 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:07:55,546 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyy_mm_dd-20190407
2019-04-06 19:07:55,546 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,546 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curdate', 'value']
2019-04-06 19:07:55,547 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554480000000
2019-04-06 19:07:55,547 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554480000000
2019-04-06 19:07:55,547 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curdate-1554480000000
2019-04-06 19:07:55,547 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,547 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyy_mm', 'value']
2019-04-06 19:07:55,547 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-14
2019-04-06 19:07:55,547 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-14
2019-04-06 19:07:55,548 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyy_mm-2019-14
2019-04-06 19:07:55,548 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,548 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyymm', 'value']
2019-04-06 19:07:55,548 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201812
2019-04-06 19:07:55,548 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201812
2019-04-06 19:07:55,548 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyymm-201812
2019-04-06 19:07:55,548 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,549 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:07:55,549 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325-20190331
2019-04-06 19:07:55,549 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325-20190331
2019-04-06 19:07:55,549 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyymmdd-20190325-20190331
2019-04-06 19:07:55,549 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,549 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyymmdd', 'value']
2019-04-06 19:07:55,549 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190501
2019-04-06 19:07:55,550 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190501
2019-04-06 19:07:55,550 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyymmdd-20190501
2019-04-06 19:07:55,550 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,550 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:07:55,550 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:07:55,550 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:07:55,550 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyy_mm_dd-2019-03-31
2019-04-06 19:07:55,550 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,551 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime', 'value']
2019-04-06 19:07:55,551 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:07:55
2019-04-06 19:07:55,551 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:07:55
2019-04-06 19:07:55,551 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime-2019-04-06 19:07:55
2019-04-06 19:07:55,551 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,551 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyymmdd', 'value']
2019-04-06 19:07:55,551 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190430
2019-04-06 19:07:55,552 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190430
2019-04-06 19:07:55,552 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyymmdd-20190430
2019-04-06 19:07:55,552 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:07:55,552 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyymmdd', 'value']
2019-04-06 19:07:55,552 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190330-20190405
2019-04-06 19:07:55,552 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190330-20190405
2019-04-06 19:07:55,552 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyymmdd-20190330-20190405
2019-04-06 19:07:55,552 APIUnittestTestCase.py[line: 176] INFO: 正在执行断言
2019-04-06 19:07:55,553 unittesttestcase.py[line: 35] INFO: 正在替换“校验模式”中的动态参数
2019-04-06 19:07:55,553 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:55,553 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'current_month_yyyymm': '201904', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'curmonth_range_yyyymmdd': '20190401-20190430', 'today_yyyy_mm_dd': '2019-04-06', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_month_yyyymm': '201903', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_last_year_yyyy_mm': '2018-04', 'millisecond_for_yesterday': 1554393600000, 'millisecond_for_curtime': 1554548875000, 'last_month_yyyy_mm': '2019-03', 'december_month_last_year_yyyy_mm': '2018-12', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'next_month_first_day_yyyymmdd': '20190501', 'curtime_puls10s': '2019-04-06 19:08:05', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_week_num_yyyyno': '201913', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyymm': '201914', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'yesterday_yyyy_mm_dd': '2019-04-05', 'weekday7_yyyymmdd': '20190407', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_weekday1_yyyymmdd': '20190325', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'weekday7_yyyy_mm_dd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'last_month_first_day_yyyymmdd': '20190301', 'last_weekday7_yyyymmdd': '20190331', 'today_yyyymmdd': '20190406', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'curmonth_first_day_yyyymmdd': '20190401', 'millisecond_for_curdate': 1554480000000, 'current_week_num_yyyy_mm': '2019-14', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'curtime': '2019-04-06 19:07:55', 'curmonth_final_day_yyyymmdd': '20190430', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05'}
2019-04-06 19:07:55,553 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：[
  {
    "模式": "curtime",
    "消息": "fail#请求失败"
  }
]
2019-04-06 19:07:55,554 unittesttestcase.py[line: 38] INFO: 正在替换“校验模式”中的插件函数
2019-04-06 19:07:55,554 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:55,554 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:55,554 unittesttestcase.py[line: 82] INFO: 校验规则为：“包含字符串：curtime”
2019-04-06 19:07:55,555 debug.py[line: 101] INFO: ======================开始运行测试用例[名称：ID4-N_获取时间和日期, ID:4]======================
2019-04-06 19:07:55,555 test_case.py[line: 32] INFO: 正在查询测试用例[ID：4, 名称：ID4-N_获取时间和日期]关联的测试步骤
2019-04-06 19:07:55,555 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(4,)
2019-04-06 19:07:55,557 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:07:55,558 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 2,  用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:07:55,558 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:07:55,558 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:07:55,558 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:07:55,558 test_case_step.py[line: 203] INFO: 正在替换“输入参数”中的动态参数
2019-04-06 19:07:55,558 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:55,558 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'current_month_yyyymm': '201904', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'curmonth_range_yyyymmdd': '20190401-20190430', 'today_yyyy_mm_dd': '2019-04-06', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_month_yyyymm': '201903', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_last_year_yyyy_mm': '2018-04', 'millisecond_for_yesterday': 1554393600000, 'millisecond_for_curtime': 1554548875000, 'last_month_yyyy_mm': '2019-03', 'december_month_last_year_yyyy_mm': '2018-12', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'next_month_first_day_yyyymmdd': '20190501', 'curtime_puls10s': '2019-04-06 19:08:05', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_week_num_yyyyno': '201913', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyymm': '201914', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'yesterday_yyyy_mm_dd': '2019-04-05', 'weekday7_yyyymmdd': '20190407', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_weekday1_yyyymmdd': '20190325', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'weekday7_yyyy_mm_dd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'last_month_first_day_yyyymmdd': '20190301', 'last_weekday7_yyyymmdd': '20190331', 'today_yyyymmdd': '20190406', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'curmonth_first_day_yyyymmdd': '20190401', 'millisecond_for_curdate': 1554480000000, 'current_week_num_yyyy_mm': '2019-14', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'curtime': '2019-04-06 19:07:55', 'curmonth_final_day_yyyymmdd': '20190430', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05'}
2019-04-06 19:07:55,559 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：${__read_file("emailPic.png", "rb")}
2019-04-06 19:07:55,559 test_case_step.py[line: 206] INFO: 正在替换“输入参数”中的插件函数
2019-04-06 19:07:55,559 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:['${__read_file("emailPic.png", "rb")}']
2019-04-06 19:07:55,559 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:55,559 test_case_step.py[line: 141] INFO: 正在替换插件函数：${__read_file("emailPic.png", "rb")}
2019-04-06 19:07:55,560 pluginfunc.py[line: 31] INFO: 待读取的文件路径为：D:\interface_project_for_dev\testdata\emailPic.png
2019-04-06 19:07:55,560 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:07:55,561 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:55,562 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'current_month_yyyymm': '201904', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'curmonth_range_yyyymmdd': '20190401-20190430', 'today_yyyy_mm_dd': '2019-04-06', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_month_yyyymm': '201903', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_last_year_yyyy_mm': '2018-04', 'millisecond_for_yesterday': 1554393600000, 'millisecond_for_curtime': 1554548875000, 'last_month_yyyy_mm': '2019-03', 'december_month_last_year_yyyy_mm': '2018-12', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'next_month_first_day_yyyymmdd': '20190501', 'curtime_puls10s': '2019-04-06 19:08:05', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_week_num_yyyyno': '201913', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyymm': '201914', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'yesterday_yyyy_mm_dd': '2019-04-05', 'weekday7_yyyymmdd': '20190407', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_weekday1_yyyymmdd': '20190325', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'weekday7_yyyy_mm_dd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'last_month_first_day_yyyymmdd': '20190301', 'last_weekday7_yyyymmdd': '20190331', 'today_yyyymmdd': '20190406', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'curmonth_first_day_yyyymmdd': '20190401', 'millisecond_for_curdate': 1554480000000, 'current_week_num_yyyy_mm': '2019-14', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'curtime': '2019-04-06 19:07:55', 'curmonth_final_day_yyyymmdd': '20190430', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05'}
2019-04-06 19:07:55,562 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:07:55,562 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:07:55,562 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:55,563 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:55,563 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:07:55,563 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:07:55,563 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'current_month_yyyymm': '201904', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'curmonth_range_yyyymmdd': '20190401-20190430', 'today_yyyy_mm_dd': '2019-04-06', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_month_yyyymm': '201903', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_last_year_yyyy_mm': '2018-04', 'millisecond_for_yesterday': 1554393600000, 'millisecond_for_curtime': 1554548875000, 'last_month_yyyy_mm': '2019-03', 'december_month_last_year_yyyy_mm': '2018-12', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'next_month_first_day_yyyymmdd': '20190501', 'curtime_puls10s': '2019-04-06 19:08:05', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_week_num_yyyyno': '201913', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyymm': '201914', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'yesterday_yyyy_mm_dd': '2019-04-05', 'weekday7_yyyymmdd': '20190407', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_weekday1_yyyymmdd': '20190325', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'weekday7_yyyy_mm_dd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'last_month_first_day_yyyymmdd': '20190301', 'last_weekday7_yyyymmdd': '20190331', 'today_yyyymmdd': '20190406', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'curmonth_first_day_yyyymmdd': '20190401', 'millisecond_for_curdate': 1554480000000, 'current_week_num_yyyy_mm': '2019-14', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'curtime': '2019-04-06 19:07:55', 'curmonth_final_day_yyyymmdd': '20190430', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05'}
2019-04-06 19:07:55,563 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:07:55,563 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:07:55,564 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:07:55,564 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:07:55,564 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:07:58,566 test_case.py[line: 104] ERROR: 执行用例测试步骤失败，正在进行第 1 次重试（第 1 步, 步骤ID: 2, 用例ID：4, 用例名称：ID4-N_获取时间和日期）
2019-04-06 19:07:58,566 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:07:58,567 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:07:58,568 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:07:58,568 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:07:58,569 test_case.py[line: 112] ERROR: 执行用例测试步骤运行失败（第 1 步, 步骤ID: 2， 用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:07:58,569 debug.py[line: 134] INFO: 正在释放资源
2019-04-06 19:07:58,570 debug.py[line: 135] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:07:58,570 debug.py[line: 141] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:08:16,012 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:08:16,013 main.py[line: 19] INFO: 当前运行模式为：rop
2019-04-06 19:08:16,013 main.py[line: 22] INFO: 当前运行计划编号为：1554493626460440
2019-04-06 19:08:16,013 main.py[line: 32] INFO: 运行单项目,待执行的运行计划编码：1554493626460440
2019-04-06 19:08:16,013 main.py[line: 33] INFO: 正在查询运行计划相关信息
2019-04-06 19:08:16,013 mydb.py[line: 122] INFO: query：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =%s  data：('1554493626460440',)
2019-04-06 19:08:16,013 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =1554493626460440
2019-04-06 19:08:16,016 main.py[line: 40] INFO: 待运行项目：名称：DEMO项目，ID：1，关联的测试计划有：demo测试计划
2019-04-06 19:08:16,016 main.py[line: 43] INFO: ======================开始执行运行计划[名称：demo运行计划]======================
2019-04-06 19:08:16,016 running_plan.py[line: 31] INFO: 正在查询项目[ID：1,名称：DEMO项目]相关信息
2019-04-06 19:08:16,016 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：(1,)
2019-04-06 19:08:16,017 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:08:16,056 running_plan.py[line: 37] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:08:16,057 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:08:16,059 running_plan.py[line: 58] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:08:16,059 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('%s', project_id) != 0 AND locate('%s', env_id) != 0   data：(1, 1)
2019-04-06 19:08:16,061 running_plan.py[line: 84] INFO: ======================开始运行测试项目[名称：DEMO项目, ID：1]======================
2019-04-06 19:08:16,061 test_project.py[line: 102] INFO: ======================正在同步更新与待运行测试计划关联的所有用例树节点信息======================
2019-04-06 19:08:16,061 test_project.py[line: 39] INFO: 待运行计划ID列表：['1']
2019-04-06 19:08:16,062 test_project.py[line: 41] INFO: 正在查询与测试计划关联的用例树节点
2019-04-06 19:08:16,062 mydb.py[line: 152] INFO: query：SELECT node_id FROM `website_api_case_tree_test_plan` WHERE plan_id IN (1) GROUP BY node_id  data：
2019-04-06 19:08:16,064 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:08:16,064 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(1,)
2019-04-06 19:08:16,064 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 1
2019-04-06 19:08:16,067 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:08:16,067 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:08:16,069 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:08:16,069 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='', sub_node_num=2 WHERE plan_id IN (1) AND node_id = 1
2019-04-06 19:08:18,662 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:08:18,662 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(2,)
2019-04-06 19:08:18,662 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 2
2019-04-06 19:08:18,665 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:08:18,665 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:08:18,667 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:08:18,667 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:08:18,668 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:08:18,669 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 2
2019-04-06 19:08:18,706 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:08:18,706 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(4,)
2019-04-06 19:08:18,706 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 4
2019-04-06 19:08:18,707 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:08:18,708 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:08:18,709 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:08:18,709 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:08:18,711 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:08:18,711 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 4
2019-04-06 19:08:18,750 test_project.py[line: 108] INFO: 同步更新与待运行测试计划关联的所有用例树节点信息成功
2019-04-06 19:08:18,750 test_project.py[line: 111] INFO: 正在查询测试计划[ID：1]相关信息
2019-04-06 19:08:18,750 mydb.py[line: 122] INFO: query：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = %s  data：('1',)
2019-04-06 19:08:18,750 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = 1
2019-04-06 19:08:18,752 test_project.py[line: 116] INFO: ======================开始运行测试计划[名称：demo测试计划, ID：1]======================
2019-04-06 19:08:18,752 test_plan.py[line: 30] INFO: 正在查询测试计划关联的测试用例
2019-04-06 19:08:18,752 mydb.py[line: 152] INFO: query：SELECT node_id, node_path, node_name FROM `website_api_case_tree_test_plan` WHERE plan_id = %s AND sub_node_num = 0 ORDER BY `order` ASC  data：('1',)
2019-04-06 19:08:18,754 test_plan.py[line: 40] INFO: 正在往测试报告-测试概况插入计划执行概要记录
2019-04-06 19:08:18,754 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_summary`(execution_num, project_id, plan_id, project_name, plan_name,start_time, end_time, time_took, case_total_num, case_pass_num, case_fail_num, case_block_num, remark) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s)  data：('1554548898', 1, '1', 'DEMO项目', 'demo测试计划', '2019-04-06 19:08:18', '', '', 0, 0, 0, 0, '')
2019-04-06 19:08:18,783 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID2-N_获取时间和日期, ID:2]======================
2019-04-06 19:08:18,783 test_case.py[line: 32] INFO: 正在查询测试用例[ID：2, 名称：ID2-N_获取时间和日期]关联的测试步骤
2019-04-06 19:08:18,783 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(2,)
2019-04-06 19:08:18,788 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:08:18,788 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 1,  用例ID：2, 用例名称：ID2-N_获取时间和日期）======================
2019-04-06 19:08:18,789 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:08:18,789 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:08:18,789 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:08:18,789 test_case_step.py[line: 169] INFO: 正在替换“请求头”中的动态参数
2019-04-06 19:08:18,790 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:08:18,790 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:08:18,790 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：{
  "fdafa": 13000
}
2019-04-06 19:08:18,791 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:08:18,791 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:08:18,791 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:08:18,792 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:08:18,792 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:08:18,792 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:08:18,793 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:08:18,793 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:08:18,793 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:08:18,793 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:08:18,794 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:08:18,794 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:08:18,794 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:08:18,794 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:08:18,796 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:08:18,796 httpprotocol.py[line: 96] INFO: 发起的请求为：GET http://192.168.0.103:8000/action/getDateAndTime
2019-04-06 19:08:18,797 httpprotocol.py[line: 97] INFO: 请求头为：OrderedDict([('fdafa', 13000)])
2019-04-06 19:08:19,255 APIUnittestTestCase.py[line: 147] INFO: 正在对服务器返回body进行解码
2019-04-06 19:08:19,256 APIUnittestTestCase.py[line: 166] INFO: 服务器返回结果"响应体(body)": {"pre_weekday7_yyyymmdd": "20190324", "pre_weekday1_yyyy_mm_dd": "2019-03-18", "current_month_yyyy_mm": "2019-04", "last_weekday1_to_weekday7_yyyymmdd": "20190325-20190331", "curmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "today_yyyy_mm_dd": "2019-04-06", "recent_7day_range_yyyy_mm_dd": "2019-03-30-2019-04-05", "current_month_last_year_yyyy_mm": "2018-04", "curmonth_final_day_yyyy_mm_dd": "2019-04-30", "curmonth_final_day_yyyymmdd": "20190430", "pre_weekday7_yyyy_mm_dd": "2019-03-24", "curtime": "2019-04-06 19:08:18", "current_month_yyyymm": "201904", "recent_30day_range_yyyy_mm_dd": "20190307-20190405", "last_weekday7_yyyy_mm_dd": "2019-03-31", "last_month_yyyy_mm": "2019-03", "last_week_num_yyyyno": "201913", "weekday1_to_weekday7_yyyymmdd": "20190401-20190407", "last_month_first_day_yyyy_mm_dd": "2019-03-01", "last_weekday7_yyyymmdd": "20190331", "last_month_yyyymm": "201903", "last_weekday1_yyyymmdd": "20190325", "recent_30day_range_yyyymmdd": "2019-03-07-2019-04-05", "millisecond_for_yesterday": 1554393600000, "current_week_num_yyyymm": "201914", "current_week_num_yyyy_mm": "2019-14", "weekday7_yyyy_mm_dd": "20190407", "curmonth_first_day_yyyymmdd": "20190401", "last_month_first_day_yyyymmdd": "20190301", "curmonth_first_day_yyyy_mm_dd": "2019-04-01", "next_month_first_day_yyyy_mm_dd": "2019-05-01", "yesterday_yyyymmdd": "20190405", "recent_7day_range_yyyymmdd": "20190330-20190405", "lastmonth_range_yyyymmdd": "20190401-20190430", "last_month_final_day_yyyy_mm_dd": "2019-03-31", "millisecond_for_curdate": 1554480000000, "weekday7_yyyymmdd": "20190407", "last_weekday1_yyyy_mm_dd": "2019-03-25", "next_month_first_day_yyyymmdd": "20190501", "december_month_last_year_yyyy_mm": "2018-12", "weekday1_to_weekday7_yyyy_mm_dd": "20190401-20190407", "weekday1_yyyy_mm_dd": "20190401", "december_month_last_year_yyyymm": "201812", "weekday1_yyyymmdd": "20190401", "curtime_puls10s": "2019-04-06 19:08:28", "yesterday_yyyy_mm_dd": "2019-04-05", "last_month_final_day_yyyymmdd": "20190331", "last_weekday1_to_weekday7_yyyy_mm_dd": "2019-03-25-2019-03-31", "lastmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "millisecond_for_curtime": 1554548898000, "curmonth_range_yyyymmdd": "20190401-20190430", "pre_weekday1_yyyymmdd": "20190318", "current_month_last_year_yyyymm": "2018-04", "today_yyyymmdd": "20190406"}
2019-04-06 19:08:19,256 APIUnittestTestCase.py[line: 167] INFO: 服务器返回结果"请求头(headers)": [('Content-Type', 'text/html; charset=utf-8'), ('Connection', 'close'), ('X-Frame-Options', 'SAMEORIGIN'), ('Content-Length', '2339')]
2019-04-06 19:08:19,256 APIUnittestTestCase.py[line: 168] INFO: 服务器返回结果"状态码(code)": 200
2019-04-06 19:08:19,257 APIUnittestTestCase.py[line: 173] INFO: 正在提取目标返回结果值
2019-04-06 19:08:19,257 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,257 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,257 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01
2019-04-06 19:08:19,258 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01
2019-04-06 19:08:19,258 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyy_mm_dd-2019-04-01
2019-04-06 19:08:19,258 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,258 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyymm', 'value']
2019-04-06 19:08:19,258 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201914
2019-04-06 19:08:19,258 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201914
2019-04-06 19:08:19,259 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyymm-201914
2019-04-06 19:08:19,260 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,260 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyymmdd', 'value']
2019-04-06 19:08:19,260 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190330-20190405
2019-04-06 19:08:19,260 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190330-20190405
2019-04-06 19:08:19,260 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyymmdd-20190330-20190405
2019-04-06 19:08:19,261 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,261 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,261 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-30
2019-04-06 19:08:19,261 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-30
2019-04-06 19:08:19,261 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyy_mm_dd-2019-04-30
2019-04-06 19:08:19,261 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,261 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curdate', 'value']
2019-04-06 19:08:19,262 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554480000000
2019-04-06 19:08:19,262 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554480000000
2019-04-06 19:08:19,262 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curdate-1554480000000
2019-04-06 19:08:19,262 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,262 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyy_mm', 'value']
2019-04-06 19:08:19,262 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-12
2019-04-06 19:08:19,262 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-12
2019-04-06 19:08:19,263 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyy_mm-2018-12
2019-04-06 19:08:19,263 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,263 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyymmdd', 'value']
2019-04-06 19:08:19,263 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190430
2019-04-06 19:08:19,263 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190430
2019-04-06 19:08:19,263 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyymmdd-20190430
2019-04-06 19:08:19,263 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,264 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_week_num_yyyyno', 'value']
2019-04-06 19:08:19,264 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201913
2019-04-06 19:08:19,264 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201913
2019-04-06 19:08:19,264 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_week_num_yyyyno-201913
2019-04-06 19:08:19,264 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,264 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,265 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:08:19,265 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:08:19,265 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:08:19,265 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,265 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyy_mm', 'value']
2019-04-06 19:08:19,266 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-14
2019-04-06 19:08:19,266 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-14
2019-04-06 19:08:19,266 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyy_mm-2019-14
2019-04-06 19:08:19,266 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,266 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,266 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:08:19,267 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:08:19,267 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyy_mm_dd-2019-03-31
2019-04-06 19:08:19,267 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,267 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,267 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25
2019-04-06 19:08:19,267 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25
2019-04-06 19:08:19,267 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyy_mm_dd-2019-03-25
2019-04-06 19:08:19,268 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,268 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,268 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-01
2019-04-06 19:08:19,268 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-01
2019-04-06 19:08:19,268 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyy_mm_dd-2019-03-01
2019-04-06 19:08:19,268 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,268 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyy_mm', 'value']
2019-04-06 19:08:19,269 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03
2019-04-06 19:08:19,269 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03
2019-04-06 19:08:19,269 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyy_mm-2019-03
2019-04-06 19:08:19,269 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,270 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,270 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-24
2019-04-06 19:08:19,270 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-24
2019-04-06 19:08:19,271 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyy_mm_dd-2019-03-24
2019-04-06 19:08:19,271 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,271 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyymmdd', 'value']
2019-04-06 19:08:19,271 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:08:19,272 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:08:19,272 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:08:19,272 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,272 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyymmdd', 'value']
2019-04-06 19:08:19,273 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190318
2019-04-06 19:08:19,273 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190318
2019-04-06 19:08:19,273 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyymmdd-20190318
2019-04-06 19:08:19,273 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,273 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,274 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:08:19,274 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:08:19,274 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyy_mm_dd-2019-03-31
2019-04-06 19:08:19,275 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,275 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyymm', 'value']
2019-04-06 19:08:19,275 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:08:19,275 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:08:19,276 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyymm-2018-04
2019-04-06 19:08:19,276 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,276 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,276 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190307-20190405
2019-04-06 19:08:19,276 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190307-20190405
2019-04-06 19:08:19,277 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyy_mm_dd-20190307-20190405
2019-04-06 19:08:19,277 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,287 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyymmdd', 'value']
2019-04-06 19:08:19,287 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325
2019-04-06 19:08:19,287 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325
2019-04-06 19:08:19,287 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyymmdd-20190325
2019-04-06 19:08:19,288 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,288 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curtime', 'value']
2019-04-06 19:08:19,288 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554548898000
2019-04-06 19:08:19,288 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554548898000
2019-04-06 19:08:19,289 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curtime-1554548898000
2019-04-06 19:08:19,289 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,289 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,290 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:08:19,290 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:08:19,290 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyy_mm_dd-20190401-20190407
2019-04-06 19:08:19,290 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,291 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_yesterday', 'value']
2019-04-06 19:08:19,291 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554393600000
2019-04-06 19:08:19,291 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554393600000
2019-04-06 19:08:19,291 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_yesterday-1554393600000
2019-04-06 19:08:19,292 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,292 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,292 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-30-2019-04-05
2019-04-06 19:08:19,292 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-30-2019-04-05
2019-04-06 19:08:19,293 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyy_mm_dd-2019-03-30-2019-04-05
2019-04-06 19:08:19,293 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,293 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime', 'value']
2019-04-06 19:08:19,294 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:08:18
2019-04-06 19:08:19,294 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:08:18
2019-04-06 19:08:19,295 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime-2019-04-06 19:08:18
2019-04-06 19:08:19,295 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,295 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyymmdd', 'value']
2019-04-06 19:08:19,295 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:08:19,296 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:08:19,296 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyymmdd-20190401
2019-04-06 19:08:19,296 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,296 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyymmdd', 'value']
2019-04-06 19:08:19,297 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:08:19,297 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:08:19,297 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyymmdd-20190331
2019-04-06 19:08:19,297 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,297 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,298 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-05-01
2019-04-06 19:08:19,298 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-05-01
2019-04-06 19:08:19,298 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyy_mm_dd-2019-05-01
2019-04-06 19:08:19,298 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,299 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,299 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:08:19,299 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:08:19,299 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:08:19,299 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,300 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,300 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-05
2019-04-06 19:08:19,300 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-05
2019-04-06 19:08:19,300 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyy_mm_dd-2019-04-05
2019-04-06 19:08:19,301 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,301 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyymmdd', 'value']
2019-04-06 19:08:19,301 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-07-2019-04-05
2019-04-06 19:08:19,301 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-07-2019-04-05
2019-04-06 19:08:19,302 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyymmdd-2019-03-07-2019-04-05
2019-04-06 19:08:19,302 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,302 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:08:19,302 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:08:19,303 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:08:19,303 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyymmdd-20190401-20190407
2019-04-06 19:08:19,303 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,303 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyymmdd', 'value']
2019-04-06 19:08:19,303 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:08:19,304 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:08:19,304 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:08:19,304 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,305 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,305 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:08:19,305 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:08:19,305 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyy_mm_dd-20190401
2019-04-06 19:08:19,306 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,306 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyymmdd', 'value']
2019-04-06 19:08:19,306 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:08:19,306 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:08:19,306 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyymmdd-20190331
2019-04-06 19:08:19,307 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,307 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyymm', 'value']
2019-04-06 19:08:19,307 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201903
2019-04-06 19:08:19,307 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201903
2019-04-06 19:08:19,307 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyymm-201903
2019-04-06 19:08:19,307 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,308 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyymm', 'value']
2019-04-06 19:08:19,308 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201812
2019-04-06 19:08:19,308 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201812
2019-04-06 19:08:19,308 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyymm-201812
2019-04-06 19:08:19,308 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,308 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:08:19,308 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325-20190331
2019-04-06 19:08:19,309 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325-20190331
2019-04-06 19:08:19,309 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyymmdd-20190325-20190331
2019-04-06 19:08:19,309 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,309 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyy_mm', 'value']
2019-04-06 19:08:19,309 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04
2019-04-06 19:08:19,309 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04
2019-04-06 19:08:19,309 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyy_mm-2019-04
2019-04-06 19:08:19,310 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,310 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyymmdd', 'value']
2019-04-06 19:08:19,310 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190324
2019-04-06 19:08:19,310 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190324
2019-04-06 19:08:19,310 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyymmdd-20190324
2019-04-06 19:08:19,310 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,310 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,311 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06
2019-04-06 19:08:19,311 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06
2019-04-06 19:08:19,311 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyy_mm_dd-2019-04-06
2019-04-06 19:08:19,311 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,311 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyymmdd', 'value']
2019-04-06 19:08:19,311 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190406
2019-04-06 19:08:19,311 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190406
2019-04-06 19:08:19,311 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyymmdd-20190406
2019-04-06 19:08:19,312 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,312 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime_puls10s', 'value']
2019-04-06 19:08:19,312 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:08:28
2019-04-06 19:08:19,312 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:08:28
2019-04-06 19:08:19,312 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime_puls10s-2019-04-06 19:08:28
2019-04-06 19:08:19,312 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,313 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyymmdd', 'value']
2019-04-06 19:08:19,313 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:08:19,313 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:08:19,313 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyymmdd-20190401
2019-04-06 19:08:19,313 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,314 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyymmdd', 'value']
2019-04-06 19:08:19,314 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190405
2019-04-06 19:08:19,314 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190405
2019-04-06 19:08:19,314 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyymmdd-20190405
2019-04-06 19:08:19,314 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,315 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,315 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-18
2019-04-06 19:08:19,315 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-18
2019-04-06 19:08:19,315 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyy_mm_dd-2019-03-18
2019-04-06 19:08:19,316 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,316 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyymm', 'value']
2019-04-06 19:08:19,316 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201904
2019-04-06 19:08:19,316 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201904
2019-04-06 19:08:19,316 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyymm-201904
2019-04-06 19:08:19,316 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,317 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,317 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25-2019-03-31
2019-04-06 19:08:19,317 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25-2019-03-31
2019-04-06 19:08:19,317 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyy_mm_dd-2019-03-25-2019-03-31
2019-04-06 19:08:19,317 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,317 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyymmdd', 'value']
2019-04-06 19:08:19,317 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190501
2019-04-06 19:08:19,318 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190501
2019-04-06 19:08:19,318 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyymmdd-20190501
2019-04-06 19:08:19,318 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,318 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:08:19,318 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:08:19,318 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:08:19,318 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyy_mm_dd-20190407
2019-04-06 19:08:19,319 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,319 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyymmdd', 'value']
2019-04-06 19:08:19,319 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190301
2019-04-06 19:08:19,319 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190301
2019-04-06 19:08:19,319 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyymmdd-20190301
2019-04-06 19:08:19,319 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,319 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyymmdd', 'value']
2019-04-06 19:08:19,320 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:08:19,320 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:08:19,320 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyymmdd-20190407
2019-04-06 19:08:19,320 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:08:19,320 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyy_mm', 'value']
2019-04-06 19:08:19,320 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:08:19,320 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:08:19,321 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyy_mm-2018-04
2019-04-06 19:08:19,321 APIUnittestTestCase.py[line: 176] INFO: 正在执行断言
2019-04-06 19:08:19,321 unittesttestcase.py[line: 35] INFO: 正在替换“校验模式”中的动态参数
2019-04-06 19:08:19,321 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:08:19,321 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'current_week_num_yyyymm': '201914', 'last_month_yyyymm': '201903', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'millisecond_for_curdate': 1554480000000, 'december_month_last_year_yyyy_mm': '2018-12', 'curmonth_final_day_yyyymmdd': '20190430', 'last_week_num_yyyyno': '201913', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyy_mm': '2019-14', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'curtime': '2019-04-06 19:08:18', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'curmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'current_month_last_year_yyyymm': '2018-04', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'millisecond_for_curtime': 1554548898000, 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_yyyymm': '201904', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'millisecond_for_yesterday': 1554393600000, 'lastmonth_range_yyyymmdd': '20190401-20190430', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_weekday1_yyyymmdd': '20190325', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'current_month_yyyy_mm': '2019-04', 'pre_weekday7_yyyymmdd': '20190324', 'today_yyyy_mm_dd': '2019-04-06', 'today_yyyymmdd': '20190406', 'curtime_puls10s': '2019-04-06 19:08:28', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'current_month_last_year_yyyy_mm': '2018-04', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_month_first_day_yyyymmdd': '20190301', 'last_month_yyyy_mm': '2019-03', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'weekday7_yyyy_mm_dd': '20190407', 'last_weekday7_yyyymmdd': '20190331', 'weekday7_yyyymmdd': '20190407', 'yesterday_yyyymmdd': '20190405'}
2019-04-06 19:08:19,322 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：[
  {
    "模式": "curtime",
    "消息": "fail#请求失败"
  }
]
2019-04-06 19:08:19,322 unittesttestcase.py[line: 38] INFO: 正在替换“校验模式”中的插件函数
2019-04-06 19:08:19,322 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:08:19,322 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:08:19,322 unittesttestcase.py[line: 82] INFO: 校验规则为：“包含字符串：curtime”
2019-04-06 19:08:19,323 test_case.py[line: 107] INFO: ======================正在记录测试用例步骤运行结果到测试报告-用例步骤执行明细表======================
2019-04-06 19:08:19,323 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_case_step`(execution_num, plan_id, case_id, step_id, `order`, step_type, op_object, object_id, exec_operation, protocol, host, port, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern, output_params, run_result, remark, run_time, run_id) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('1554548898', '1', 2, 1, 1, '请求接口', 'APIUnittestTestCase', 0, 'test_api_for_json', 'http', '192.168.0.103', 8000, "OrderedDict([('fdafa', 13000)])", 'GET', '/action/getDateAndTime', '', 'body', '包含字符串', "[{'消息': 'fail#请求失败', '模式': 'curtime'}]", '{\n  "dic": {\n    "curtime": {\n      "curtime": "value"\n    },\n    "curtime_puls10s": {\n      "curtime_puls10s": "value"\n    },\n    "today_yyyy_mm_dd": {\n      "today_yyyy_mm_dd": "value"\n    },\n    "today_yyyymmdd": {\n      "today_yyyymmdd": "value"\n    },\n    "yesterday_yyyy_mm_dd": {\n      "yesterday_yyyy_mm_dd": "value"\n    },\n    "yesterday_yyyymmdd": {\n      "yesterday_yyyymmdd": "value"\n    },\n    "curmonth_first_day_yyyymmdd": {\n      "curmonth_first_day_yyyymmdd": "value"\n    },\n    "curmonth_first_day_yyyy_mm_dd": {\n      "curmonth_first_day_yyyy_mm_dd": "value"\n    },\n    "next_month_first_day_yyyymmdd": {\n      "next_month_first_day_yyyymmdd": "value"\n    },\n    "next_month_first_day_yyyy_mm_dd": {\n      "next_month_first_day_yyyy_mm_dd": "value"\n    },\n    "last_month_first_day_yyyy_mm_dd": {\n      "last_month_first_day_yyyy_mm_dd": "value"\n    },\n    "last_month_first_day_yyyymmdd": {\n      "last_month_first_day_yyyymmdd": "value"\n    },\n    "curmonth_final_day_yyyymmdd": {\n      "curmonth_final_day_yyyymmdd": "value"\n    },\n    "curmonth_final_day_yyyy_mm_dd": {\n      "curmonth_final_day_yyyy_mm_dd": "value"\n    },\n    "last_month_final_day_yyyymmdd": {\n      "last_month_final_day_yyyymmdd": "value"\n    },\n    "last_month_final_day_yyyy_mm_dd": {\n      "last_month_final_day_yyyy_mm_dd": "value"\n    },\n    "recent_7day_range_yyyymmdd": {\n      "recent_7day_range_yyyymmdd": "value"\n    },\n    "recent_7day_range_yyyy_mm_dd": {\n      "recent_7day_range_yyyy_mm_dd": "value"\n    },\n    "recent_30day_range_yyyy_mm_dd": {\n      "recent_30day_range_yyyy_mm_dd": "value"\n    },\n    "recent_30day_range_yyyymmdd": {\n      "recent_30day_range_yyyymmdd": "value"\n    },\n    "curmonth_range_yyyymmdd": {\n      "curmonth_range_yyyymmdd": "value"\n    },\n    "curmonth_range_yyyy_mm_dd": {\n      "curmonth_range_yyyy_mm_dd": "value"\n    },\n    "lastmonth_range_yyyymmdd": {\n      "lastmonth_range_yyyymmdd": "value"\n    },\n    "lastmonth_range_yyyy_mm_dd": {\n      "lastmonth_range_yyyy_mm_dd": "value"\n    },\n    "current_month_yyyy_mm": {\n      "current_month_yyyy_mm": "value"\n    },\n    "current_month_yyyymm": {\n      "current_month_yyyymm": "value"\n    },\n    "last_month_yyyy_mm": {\n      "last_month_yyyy_mm": "value"\n    },\n    "last_month_yyyymm": {\n      "last_month_yyyymm": "value"\n    },\n    "current_month_last_year_yyyy_mm": {\n      "current_month_last_year_yyyy_mm": "value"\n    },\n    "current_month_last_year_yyyymm": {\n      "current_month_last_year_yyyymm": "value"\n    },\n    "december_month_last_year_yyyy_mm": {\n      "december_month_last_year_yyyy_mm": "value"\n    },\n    "december_month_last_year_yyyymm": {\n      "december_month_last_year_yyyymm": "value"\n    },\n    "current_week_num_yyyymm": {\n      "current_week_num_yyyymm": "value"\n    },\n    "current_week_num_yyyy_mm": {\n      "current_week_num_yyyy_mm": "value"\n    },\n    "last_week_num_yyyyno": {\n      "last_week_num_yyyyno": "value"\n    },\n    "millisecond_for_curtime": {\n      "millisecond_for_curtime": "value"\n    },\n    "millisecond_for_curdate": {\n      "millisecond_for_curdate": "value"\n    },\n    "millisecond_for_yesterday": {\n      "millisecond_for_yesterday": "value"\n    },\n    "weekday1_yyyymmdd": {\n      "weekday1_yyyymmdd": "value"\n    },\n    "weekday1_yyyy_mm_dd": {\n      "weekday1_yyyy_mm_dd": "value"\n    },\n    "weekday7_yyyymmdd": {\n      "weekday7_yyyymmdd": "value"\n    },\n    "weekday7_yyyy_mm_dd": {\n      "weekday7_yyyy_mm_dd": "value"\n    },\n    "last_weekday1_yyyymmdd": {\n      "last_weekday1_yyyymmdd": "value"\n    },\n    "last_weekday1_yyyy_mm_dd": {\n      "last_weekday1_yyyy_mm_dd": "value"\n    },\n    "last_weekday7_yyyymmdd": {\n      "last_weekday7_yyyymmdd": "value"\n    },\n    "last_weekday7_yyyy_mm_dd": {\n      "last_weekday7_yyyy_mm_dd": "value"\n    },\n    "weekday1_to_weekday7_yyyymmdd": {\n      "weekday1_to_weekday7_yyyymmdd": "value"\n    },\n    "weekday1_to_weekday7_yyyy_mm_dd": {\n      "weekday1_to_weekday7_yyyy_mm_dd": "value"\n    },\n    "last_weekday1_to_weekday7_yyyymmdd": {\n      "last_weekday1_to_weekday7_yyyymmdd": "value"\n    },\n    "last_weekday1_to_weekday7_yyyy_mm_dd": {\n      "last_weekday1_to_weekday7_yyyy_mm_dd": "value"\n    },\n    "pre_weekday1_yyyymmdd": {\n      "pre_weekday1_yyyymmdd": "value"\n    },\n    "pre_weekday1_yyyy_mm_dd": {\n      "pre_weekday1_yyyy_mm_dd": "value"\n    },\n    "pre_weekday7_yyyymmdd": {\n      "pre_weekday7_yyyymmdd": "value"\n    },\n    "pre_weekday7_yyyy_mm_dd": {\n      "pre_weekday7_yyyy_mm_dd": "value"\n    }\n  }\n}', '成功', '', '2019-04-06 19:08:18', 0)
2019-04-06 19:08:19,443 test_case.py[line: 132] INFO: 正在计算运行耗时
2019-04-06 19:08:19,443 test_case.py[line: 138] INFO: 正在记录用例运行结果到测试报告-用例执行明细表
2019-04-06 19:08:19,444 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_case`(execution_num, plan_id, case_id, case_path, case_name, run_result, remark, run_time, time_took) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('1554548898', '1', 2, 'DEMO项目', 'ID2-N_获取时间和日期', '成功', '', '2019-04-06 19:08:18', '0天 0小时 0分 0秒')
2019-04-06 19:08:19,508 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID4-N_获取时间和日期, ID:4]======================
2019-04-06 19:08:19,509 test_case.py[line: 32] INFO: 正在查询测试用例[ID：4, 名称：ID4-N_获取时间和日期]关联的测试步骤
2019-04-06 19:08:19,509 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(4,)
2019-04-06 19:08:19,511 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:08:19,511 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 2,  用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:08:19,511 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:08:19,512 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:08:19,512 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:08:19,512 test_case_step.py[line: 203] INFO: 正在替换“输入参数”中的动态参数
2019-04-06 19:08:19,512 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:08:19,512 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'current_week_num_yyyymm': '201914', 'last_month_yyyymm': '201903', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'millisecond_for_curdate': 1554480000000, 'december_month_last_year_yyyy_mm': '2018-12', 'curmonth_final_day_yyyymmdd': '20190430', 'last_week_num_yyyyno': '201913', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyy_mm': '2019-14', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'curtime': '2019-04-06 19:08:18', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'curmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'current_month_last_year_yyyymm': '2018-04', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'millisecond_for_curtime': 1554548898000, 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_yyyymm': '201904', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'millisecond_for_yesterday': 1554393600000, 'lastmonth_range_yyyymmdd': '20190401-20190430', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_weekday1_yyyymmdd': '20190325', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'current_month_yyyy_mm': '2019-04', 'pre_weekday7_yyyymmdd': '20190324', 'today_yyyy_mm_dd': '2019-04-06', 'today_yyyymmdd': '20190406', 'curtime_puls10s': '2019-04-06 19:08:28', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'current_month_last_year_yyyy_mm': '2018-04', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_month_first_day_yyyymmdd': '20190301', 'last_month_yyyy_mm': '2019-03', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'weekday7_yyyy_mm_dd': '20190407', 'last_weekday7_yyyymmdd': '20190331', 'weekday7_yyyymmdd': '20190407', 'yesterday_yyyymmdd': '20190405'}
2019-04-06 19:08:19,512 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：${__read_file("emailPic.png", "rb")}
2019-04-06 19:08:19,513 test_case_step.py[line: 206] INFO: 正在替换“输入参数”中的插件函数
2019-04-06 19:08:19,513 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:['${__read_file("emailPic.png", "rb")}']
2019-04-06 19:08:19,513 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:08:19,513 test_case_step.py[line: 141] INFO: 正在替换插件函数：${__read_file("emailPic.png", "rb")}
2019-04-06 19:08:19,514 pluginfunc.py[line: 31] INFO: 待读取的文件路径为：D:\interface_project_for_dev\testdata\emailPic.png
2019-04-06 19:08:19,515 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:08:19,515 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:08:19,515 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'current_week_num_yyyymm': '201914', 'last_month_yyyymm': '201903', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'millisecond_for_curdate': 1554480000000, 'december_month_last_year_yyyy_mm': '2018-12', 'curmonth_final_day_yyyymmdd': '20190430', 'last_week_num_yyyyno': '201913', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyy_mm': '2019-14', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'curtime': '2019-04-06 19:08:18', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'curmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'current_month_last_year_yyyymm': '2018-04', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'millisecond_for_curtime': 1554548898000, 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_yyyymm': '201904', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'millisecond_for_yesterday': 1554393600000, 'lastmonth_range_yyyymmdd': '20190401-20190430', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_weekday1_yyyymmdd': '20190325', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'current_month_yyyy_mm': '2019-04', 'pre_weekday7_yyyymmdd': '20190324', 'today_yyyy_mm_dd': '2019-04-06', 'today_yyyymmdd': '20190406', 'curtime_puls10s': '2019-04-06 19:08:28', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'current_month_last_year_yyyy_mm': '2018-04', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_month_first_day_yyyymmdd': '20190301', 'last_month_yyyy_mm': '2019-03', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'weekday7_yyyy_mm_dd': '20190407', 'last_weekday7_yyyymmdd': '20190331', 'weekday7_yyyymmdd': '20190407', 'yesterday_yyyymmdd': '20190405'}
2019-04-06 19:08:19,516 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:08:19,516 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:08:19,516 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:08:19,516 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:08:19,516 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:08:19,517 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:08:19,517 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'current_week_num_yyyymm': '201914', 'last_month_yyyymm': '201903', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'millisecond_for_curdate': 1554480000000, 'december_month_last_year_yyyy_mm': '2018-12', 'curmonth_final_day_yyyymmdd': '20190430', 'last_week_num_yyyyno': '201913', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_week_num_yyyy_mm': '2019-14', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'curtime': '2019-04-06 19:08:18', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'curmonth_range_yyyymmdd': '20190401-20190430', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'current_month_last_year_yyyymm': '2018-04', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'millisecond_for_curtime': 1554548898000, 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_yyyymm': '201904', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday1_yyyymmdd': '20190401', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'millisecond_for_yesterday': 1554393600000, 'lastmonth_range_yyyymmdd': '20190401-20190430', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_weekday1_yyyymmdd': '20190325', 'december_month_last_year_yyyymm': '201812', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'current_month_yyyy_mm': '2019-04', 'pre_weekday7_yyyymmdd': '20190324', 'today_yyyy_mm_dd': '2019-04-06', 'today_yyyymmdd': '20190406', 'curtime_puls10s': '2019-04-06 19:08:28', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'current_month_last_year_yyyy_mm': '2018-04', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_month_first_day_yyyymmdd': '20190301', 'last_month_yyyy_mm': '2019-03', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'weekday7_yyyy_mm_dd': '20190407', 'last_weekday7_yyyymmdd': '20190331', 'weekday7_yyyymmdd': '20190407', 'yesterday_yyyymmdd': '20190405'}
2019-04-06 19:08:19,517 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:08:19,517 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:08:19,518 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:08:19,518 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:08:19,518 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:08:22,521 test_case.py[line: 104] ERROR: 执行用例测试步骤失败，正在进行第 1 次重试（第 1 步, 步骤ID: 2, 用例ID：4, 用例名称：ID4-N_获取时间和日期）
2019-04-06 19:08:22,522 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:08:22,522 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:08:22,523 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:08:22,523 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:08:22,524 test_case.py[line: 107] INFO: ======================正在记录测试用例步骤运行结果到测试报告-用例步骤执行明细表======================
2019-04-06 19:08:22,524 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_case_step`(execution_num, plan_id, case_id, step_id, `order`, step_type, op_object, object_id, exec_operation, protocol, host, port, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern, output_params, run_result, remark, run_time, run_id) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('1554548898', '1', 4, 2, 1, '请求接口', 'APIUnittestTestCase', 0, 'test_api_for_json', 'http', '192.168.0.103', 8000, '', 'GET', '/action/getDateAndTime', '${__read_file("emailPic.png", "rb")}', 'body', '包含字符串', '[\n  {\n    "模式": "curtime",\n    "消息": "fail#请求失败"\n  }\n]', '{\n  "dic": {\n    "curtime": {\n      "curtime": "value"\n    },\n    "curtime_puls10s": {\n      "curtime_puls10s": "value"\n    },\n    "today_yyyy_mm_dd": {\n      "today_yyyy_mm_dd": "value"\n    },\n    "today_yyyymmdd": {\n      "today_yyyymmdd": "value"\n    },\n    "yesterday_yyyy_mm_dd": {\n      "yesterday_yyyy_mm_dd": "value"\n    },\n    "yesterday_yyyymmdd": {\n      "yesterday_yyyymmdd": "value"\n    },\n    "curmonth_first_day_yyyymmdd": {\n      "curmonth_first_day_yyyymmdd": "value"\n    },\n    "curmonth_first_day_yyyy_mm_dd": {\n      "curmonth_first_day_yyyy_mm_dd": "value"\n    },\n    "next_month_first_day_yyyymmdd": {\n      "next_month_first_day_yyyymmdd": "value"\n    },\n    "next_month_first_day_yyyy_mm_dd": {\n      "next_month_first_day_yyyy_mm_dd": "value"\n    },\n    "last_month_first_day_yyyy_mm_dd": {\n      "last_month_first_day_yyyy_mm_dd": "value"\n    },\n    "last_month_first_day_yyyymmdd": {\n      "last_month_first_day_yyyymmdd": "value"\n    },\n    "curmonth_final_day_yyyymmdd": {\n      "curmonth_final_day_yyyymmdd": "value"\n    },\n    "curmonth_final_day_yyyy_mm_dd": {\n      "curmonth_final_day_yyyy_mm_dd": "value"\n    },\n    "last_month_final_day_yyyymmdd": {\n      "last_month_final_day_yyyymmdd": "value"\n    },\n    "last_month_final_day_yyyy_mm_dd": {\n      "last_month_final_day_yyyy_mm_dd": "value"\n    },\n    "recent_7day_range_yyyymmdd": {\n      "recent_7day_range_yyyymmdd": "value"\n    },\n    "recent_7day_range_yyyy_mm_dd": {\n      "recent_7day_range_yyyy_mm_dd": "value"\n    },\n    "recent_30day_range_yyyy_mm_dd": {\n      "recent_30day_range_yyyy_mm_dd": "value"\n    },\n    "recent_30day_range_yyyymmdd": {\n      "recent_30day_range_yyyymmdd": "value"\n    },\n    "curmonth_range_yyyymmdd": {\n      "curmonth_range_yyyymmdd": "value"\n    },\n    "curmonth_range_yyyy_mm_dd": {\n      "curmonth_range_yyyy_mm_dd": "value"\n    },\n    "lastmonth_range_yyyymmdd": {\n      "lastmonth_range_yyyymmdd": "value"\n    },\n    "lastmonth_range_yyyy_mm_dd": {\n      "lastmonth_range_yyyy_mm_dd": "value"\n    },\n    "current_month_yyyy_mm": {\n      "current_month_yyyy_mm": "value"\n    },\n    "current_month_yyyymm": {\n      "current_month_yyyymm": "value"\n    },\n    "last_month_yyyy_mm": {\n      "last_month_yyyy_mm": "value"\n    },\n    "last_month_yyyymm": {\n      "last_month_yyyymm": "value"\n    },\n    "current_month_last_year_yyyy_mm": {\n      "current_month_last_year_yyyy_mm": "value"\n    },\n    "current_month_last_year_yyyymm": {\n      "current_month_last_year_yyyymm": "value"\n    },\n    "december_month_last_year_yyyy_mm": {\n      "december_month_last_year_yyyy_mm": "value"\n    },\n    "december_month_last_year_yyyymm": {\n      "december_month_last_year_yyyymm": "value"\n    },\n    "current_week_num_yyyymm": {\n      "current_week_num_yyyymm": "value"\n    },\n    "current_week_num_yyyy_mm": {\n      "current_week_num_yyyy_mm": "value"\n    },\n    "last_week_num_yyyyno": {\n      "last_week_num_yyyyno": "value"\n    },\n    "millisecond_for_curtime": {\n      "millisecond_for_curtime": "value"\n    },\n    "millisecond_for_curdate": {\n      "millisecond_for_curdate": "value"\n    },\n    "millisecond_for_yesterday": {\n      "millisecond_for_yesterday": "value"\n    },\n    "weekday1_yyyymmdd": {\n      "weekday1_yyyymmdd": "value"\n    },\n    "weekday1_yyyy_mm_dd": {\n      "weekday1_yyyy_mm_dd": "value"\n    },\n    "weekday7_yyyymmdd": {\n      "weekday7_yyyymmdd": "value"\n    },\n    "weekday7_yyyy_mm_dd": {\n      "weekday7_yyyy_mm_dd": "value"\n    },\n    "last_weekday1_yyyymmdd": {\n      "last_weekday1_yyyymmdd": "value"\n    },\n    "last_weekday1_yyyy_mm_dd": {\n      "last_weekday1_yyyy_mm_dd": "value"\n    },\n    "last_weekday7_yyyymmdd": {\n      "last_weekday7_yyyymmdd": "value"\n    },\n    "last_weekday7_yyyy_mm_dd": {\n      "last_weekday7_yyyy_mm_dd": "value"\n    },\n    "weekday1_to_weekday7_yyyymmdd": {\n      "weekday1_to_weekday7_yyyymmdd": "value"\n    },\n    "weekday1_to_weekday7_yyyy_mm_dd": {\n      "weekday1_to_weekday7_yyyy_mm_dd": "value"\n    },\n    "last_weekday1_to_weekday7_yyyymmdd": {\n      "last_weekday1_to_weekday7_yyyymmdd": "value"\n    },\n    "last_weekday1_to_weekday7_yyyy_mm_dd": {\n      "last_weekday1_to_weekday7_yyyy_mm_dd": "value"\n    },\n    "pre_weekday1_yyyymmdd": {\n      "pre_weekday1_yyyymmdd": "value"\n    },\n    "pre_weekday1_yyyy_mm_dd": {\n      "pre_weekday1_yyyy_mm_dd": "value"\n    },\n    "pre_weekday7_yyyymmdd": {\n      "pre_weekday7_yyyymmdd": "value"\n    },\n    "pre_weekday7_yyyy_mm_dd": {\n      "pre_weekday7_yyyy_mm_dd": "value"\n    }\n  }\n}', '失败', 'Traceback (most recent call last):\n  File "D:\\Program Files (x86)\\python35\\lib\\urllib\\parse.py", line 792, in urlencode\n    raise TypeError\nTypeError\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "D:\\interface_project_for_dev\\interface\\APIUnittestTestCase.py", line 141, in test_api_for_json\n    self.input_params = urllib.parse.urlencode(self.input_params)\n  File "D:\\Program Files (x86)\\python35\\lib\\urllib\\parse.py", line 800, in urlencode\n    "or mapping object").with_traceback(tb)\n  File "D:\\Program Files (x86)\\python35\\lib\\urllib\\parse.py", line 792, in urlencode\n    raise TypeError\nTypeError: not a valid non-string sequence or mapping object\n', '2019-04-06 19:08:22', 0)
2019-04-06 19:08:22,708 test_case.py[line: 112] ERROR: 执行用例测试步骤运行失败（第 1 步, 步骤ID: 2， 用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:08:22,708 test_case.py[line: 132] INFO: 正在计算运行耗时
2019-04-06 19:08:22,708 test_case.py[line: 138] INFO: 正在记录用例运行结果到测试报告-用例执行明细表
2019-04-06 19:08:22,709 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_case`(execution_num, plan_id, case_id, case_path, case_name, run_result, remark, run_time, time_took) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('1554548898', '1', 4, 'DEMO项目', 'ID4-N_获取时间和日期', '失败', '步骤(第 1 步, 步骤ID: 2)运行失败', '2019-04-06 19:08:19', '0天 0小时 0分 3秒')
2019-04-06 19:08:22,735 test_plan.py[line: 59] INFO: 测试用例执行完毕，正在更新测试报告-测试概况表
2019-04-06 19:08:22,735 test_report.py[line: 13] INFO: 正在查询运行状态为：成功的用例记录数
2019-04-06 19:08:22,735 mydb.py[line: 122] INFO: query：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '%s' AND execution_num =%s AND plan_id=%s  data：('成功', '1554548898', '1')
2019-04-06 19:08:22,735 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '成功' AND execution_num =1554548898 AND plan_id=1
2019-04-06 19:08:22,737 test_report.py[line: 13] INFO: 正在查询运行状态为：失败的用例记录数
2019-04-06 19:08:22,737 mydb.py[line: 122] INFO: query：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '%s' AND execution_num =%s AND plan_id=%s  data：('失败', '1554548898', '1')
2019-04-06 19:08:22,738 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '失败' AND execution_num =1554548898 AND plan_id=1
2019-04-06 19:08:22,739 test_report.py[line: 13] INFO: 正在查询运行状态为：阻塞的用例记录数
2019-04-06 19:08:22,739 mydb.py[line: 122] INFO: query：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '%s' AND execution_num =%s AND plan_id=%s  data：('阻塞', '1554548898', '1')
2019-04-06 19:08:22,739 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '阻塞' AND execution_num =1554548898 AND plan_id=1
2019-04-06 19:08:22,741 mydb.py[line: 82] INFO: update_query：UPDATE `website_api_test_report_for_summary` SET end_time='2019-04-06 19:08:22', time_took='0天 0小时 0分 3秒', case_total_num=2, case_pass_num=1, case_fail_num=1, case_block_num=0, remark='存在运行失败、被阻塞的用例' WHERE execution_num='1554548898' AND plan_id=1
2019-04-06 19:08:22,768 running_plan.py[line: 107] INFO: 正在释放资源
2019-04-06 19:08:22,768 running_plan.py[line: 108] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:08:22,768 running_plan.py[line: 114] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:08:22,768 main.py[line: 48] INFO: 执行失败，正在更新数据库运行计划的运行状态
2019-04-06 19:08:22,768 mydb.py[line: 82] INFO: update_query：UPDATE `website_running_plan` SET running_status ='执行失败', remark='项目运行失败：计划ID：1，失败原因：存在运行失败、被阻塞的用例   ' WHERE running_plan_num= 1554493626460440
2019-04-06 19:49:45,306 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:49:45,306 main.py[line: 19] INFO: 当前运行模式为：rop
2019-04-06 19:49:45,306 main.py[line: 22] INFO: 当前运行计划编号为：1554493626460440
2019-04-06 19:49:45,306 main.py[line: 32] INFO: 运行单项目,待执行的运行计划编码：1554493626460440
2019-04-06 19:49:45,306 main.py[line: 33] INFO: 正在查询运行计划相关信息
2019-04-06 19:49:45,307 mydb.py[line: 122] INFO: query：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =%s  data：('1554493626460440',)
2019-04-06 19:49:45,307 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =1554493626460440
2019-04-06 19:49:45,308 main.py[line: 40] INFO: 待运行项目：名称：DEMO项目，ID：1，关联的测试计划有：demo测试计划
2019-04-06 19:49:45,309 main.py[line: 43] INFO: ======================开始执行运行计划[名称：demo运行计划]======================
2019-04-06 19:49:45,309 running_plan.py[line: 31] INFO: 正在查询项目[ID：1,名称：DEMO项目]相关信息
2019-04-06 19:49:45,309 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：(1,)
2019-04-06 19:49:45,309 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:49:45,311 running_plan.py[line: 37] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:49:45,311 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:49:45,312 running_plan.py[line: 58] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:49:45,312 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('%s', project_id) != 0 AND locate('%s', env_id) != 0   data：(1, 1)
2019-04-06 19:49:45,314 running_plan.py[line: 84] INFO: ======================开始运行测试项目[名称：DEMO项目, ID：1]======================
2019-04-06 19:49:45,314 test_project.py[line: 102] INFO: ======================正在同步更新与待运行测试计划关联的所有用例树节点信息======================
2019-04-06 19:49:45,314 test_project.py[line: 39] INFO: 待运行计划ID列表：['1']
2019-04-06 19:49:45,314 test_project.py[line: 41] INFO: 正在查询与测试计划关联的用例树节点
2019-04-06 19:49:45,314 mydb.py[line: 152] INFO: query：SELECT node_id FROM `website_api_case_tree_test_plan` WHERE plan_id IN (1) GROUP BY node_id  data：
2019-04-06 19:49:45,316 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:49:45,316 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(1,)
2019-04-06 19:49:45,316 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 1
2019-04-06 19:49:45,318 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:49:45,318 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:49:45,320 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:49:45,320 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='', sub_node_num=2 WHERE plan_id IN (1) AND node_id = 1
2019-04-06 19:49:45,348 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:49:45,348 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(2,)
2019-04-06 19:49:45,349 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 2
2019-04-06 19:49:45,350 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:49:45,351 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:49:45,352 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:49:45,352 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:49:45,353 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:49:45,353 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 2
2019-04-06 19:49:45,381 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:49:45,381 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(4,)
2019-04-06 19:49:45,381 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 4
2019-04-06 19:49:45,383 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:49:45,383 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:49:45,384 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:49:45,384 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:49:45,385 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:49:45,385 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 4
2019-04-06 19:49:45,411 test_project.py[line: 108] INFO: 同步更新与待运行测试计划关联的所有用例树节点信息成功
2019-04-06 19:49:45,411 test_project.py[line: 111] INFO: 正在查询测试计划[ID：1]相关信息
2019-04-06 19:49:45,411 mydb.py[line: 122] INFO: query：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = %s  data：('1',)
2019-04-06 19:49:45,411 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = 1
2019-04-06 19:49:45,412 test_project.py[line: 116] INFO: ======================开始运行测试计划[名称：demo测试计划, ID：1]======================
2019-04-06 19:49:45,413 test_plan.py[line: 30] INFO: 正在查询测试计划关联的测试用例
2019-04-06 19:49:45,413 mydb.py[line: 152] INFO: query：SELECT node_id, node_path, node_name FROM `website_api_case_tree_test_plan` WHERE plan_id = %s AND sub_node_num = 0 ORDER BY `order` ASC  data：('1',)
2019-04-06 19:49:45,414 test_plan.py[line: 40] INFO: 正在往测试报告-测试概况插入计划执行概要记录
2019-04-06 19:49:45,414 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_summary`(execution_num, project_id, plan_id, project_name, plan_name,start_time, end_time, time_took, case_total_num, case_pass_num, case_fail_num, case_block_num, remark) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s)  data：('1554551385', 1, '1', 'DEMO项目', 'demo测试计划', '2019-04-06 19:49:45', '', '', 0, 0, 0, 0, '')
2019-04-06 19:49:45,447 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID2-N_获取时间和日期, ID:2]======================
2019-04-06 19:49:45,447 test_case.py[line: 32] INFO: 正在查询测试用例[ID：2, 名称：ID2-N_获取时间和日期]关联的测试步骤
2019-04-06 19:49:45,448 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(2,)
2019-04-06 19:49:45,450 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:49:45,450 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 1,  用例ID：2, 用例名称：ID2-N_获取时间和日期）======================
2019-04-06 19:49:45,450 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:49:45,450 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:49:45,451 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:49:45,451 test_case_step.py[line: 169] INFO: 正在替换“请求头”中的动态参数
2019-04-06 19:49:45,451 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:49:45,451 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:49:45,451 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：{
  "fdafa": 13000
}
2019-04-06 19:49:45,451 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:49:45,452 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:49:45,452 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:49:45,452 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:49:45,452 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:49:45,452 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:49:45,452 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:49:45,452 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:49:45,453 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:49:45,453 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:49:45,453 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:49:45,453 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:49:45,453 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:49:45,453 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:49:45,454 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:49:45,454 httpprotocol.py[line: 96] INFO: 发起的请求为：GET http://192.168.0.103:8000/action/getDateAndTime
2019-04-06 19:49:45,454 httpprotocol.py[line: 97] INFO: 请求头为：OrderedDict([('fdafa', 13000)])
2019-04-06 19:49:45,901 APIUnittestTestCase.py[line: 147] INFO: 正在对服务器返回body进行解码
2019-04-06 19:49:45,902 APIUnittestTestCase.py[line: 166] INFO: 服务器返回结果"响应体(body)": {"curmonth_range_yyyymmdd": "20190401-20190430", "last_weekday7_yyyy_mm_dd": "2019-03-31", "last_weekday1_yyyy_mm_dd": "2019-03-25", "lastmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "weekday1_yyyymmdd": "20190401", "current_month_yyyy_mm": "2019-04", "today_yyyy_mm_dd": "2019-04-06", "recent_30day_range_yyyy_mm_dd": "20190307-20190405", "next_month_first_day_yyyy_mm_dd": "2019-05-01", "current_month_last_year_yyyy_mm": "2018-04", "last_week_num_yyyyno": "201913", "weekday7_yyyymmdd": "20190407", "weekday1_to_weekday7_yyyymmdd": "20190401-20190407", "current_month_last_year_yyyymm": "2018-04", "last_weekday1_to_weekday7_yyyymmdd": "20190325-20190331", "weekday1_yyyy_mm_dd": "20190401", "curtime": "2019-04-06 19:49:45", "today_yyyymmdd": "20190406", "curmonth_first_day_yyyy_mm_dd": "2019-04-01", "pre_weekday7_yyyymmdd": "20190324", "last_weekday1_yyyymmdd": "20190325", "recent_7day_range_yyyymmdd": "20190330-20190405", "last_month_yyyymm": "201903", "millisecond_for_curdate": 1554480000000, "december_month_last_year_yyyymm": "201812", "pre_weekday1_yyyymmdd": "20190318", "weekday7_yyyy_mm_dd": "20190407", "current_week_num_yyyymm": "201914", "next_month_first_day_yyyymmdd": "20190501", "curtime_puls10s": "2019-04-06 19:49:55", "yesterday_yyyy_mm_dd": "2019-04-05", "december_month_last_year_yyyy_mm": "2018-12", "yesterday_yyyymmdd": "20190405", "curmonth_final_day_yyyymmdd": "20190430", "lastmonth_range_yyyymmdd": "20190401-20190430", "last_weekday1_to_weekday7_yyyy_mm_dd": "2019-03-25-2019-03-31", "pre_weekday1_yyyy_mm_dd": "2019-03-18", "last_month_yyyy_mm": "2019-03", "last_month_final_day_yyyy_mm_dd": "2019-03-31", "weekday1_to_weekday7_yyyy_mm_dd": "20190401-20190407", "current_month_yyyymm": "201904", "millisecond_for_yesterday": 1554393600000, "recent_30day_range_yyyymmdd": "2019-03-07-2019-04-05", "curmonth_final_day_yyyy_mm_dd": "2019-04-30", "last_month_first_day_yyyymmdd": "20190301", "recent_7day_range_yyyy_mm_dd": "2019-03-30-2019-04-05", "current_week_num_yyyy_mm": "2019-14", "last_month_first_day_yyyy_mm_dd": "2019-03-01", "last_month_final_day_yyyymmdd": "20190331", "curmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "millisecond_for_curtime": 1554551385000, "last_weekday7_yyyymmdd": "20190331", "pre_weekday7_yyyy_mm_dd": "2019-03-24", "curmonth_first_day_yyyymmdd": "20190401"}
2019-04-06 19:49:45,902 APIUnittestTestCase.py[line: 167] INFO: 服务器返回结果"请求头(headers)": [('Content-Length', '2339'), ('Content-Type', 'text/html; charset=utf-8'), ('Connection', 'close'), ('X-Frame-Options', 'SAMEORIGIN')]
2019-04-06 19:49:45,902 APIUnittestTestCase.py[line: 168] INFO: 服务器返回结果"状态码(code)": 200
2019-04-06 19:49:45,903 APIUnittestTestCase.py[line: 173] INFO: 正在提取目标返回结果值
2019-04-06 19:49:45,903 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,903 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyymmdd', 'value']
2019-04-06 19:49:45,903 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190318
2019-04-06 19:49:45,903 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190318
2019-04-06 19:49:45,903 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyymmdd-20190318
2019-04-06 19:49:45,903 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,904 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:49:45,904 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325-20190331
2019-04-06 19:49:45,904 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325-20190331
2019-04-06 19:49:45,904 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyymmdd-20190325-20190331
2019-04-06 19:49:45,904 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,904 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,905 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:49:45,905 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:49:45,905 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:49:45,905 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,905 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyymm', 'value']
2019-04-06 19:49:45,905 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201904
2019-04-06 19:49:45,905 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201904
2019-04-06 19:49:45,906 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyymm-201904
2019-04-06 19:49:45,906 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,906 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyy_mm', 'value']
2019-04-06 19:49:45,906 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03
2019-04-06 19:49:45,906 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03
2019-04-06 19:49:45,906 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyy_mm-2019-03
2019-04-06 19:49:45,906 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,907 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyymmdd', 'value']
2019-04-06 19:49:45,907 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:49:45,907 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:49:45,907 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:49:45,907 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,907 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyymmdd', 'value']
2019-04-06 19:49:45,908 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190501
2019-04-06 19:49:45,908 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190501
2019-04-06 19:49:45,908 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyymmdd-20190501
2019-04-06 19:49:45,908 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,909 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,909 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:49:45,909 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:49:45,909 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyy_mm_dd-20190407
2019-04-06 19:49:45,909 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,909 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyymm', 'value']
2019-04-06 19:49:45,910 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201903
2019-04-06 19:49:45,910 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201903
2019-04-06 19:49:45,910 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyymm-201903
2019-04-06 19:49:45,910 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,910 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyymmdd', 'value']
2019-04-06 19:49:45,910 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190301
2019-04-06 19:49:45,910 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190301
2019-04-06 19:49:45,911 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyymmdd-20190301
2019-04-06 19:49:45,911 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,911 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyymm', 'value']
2019-04-06 19:49:45,911 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:49:45,911 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:49:45,911 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyymm-2018-04
2019-04-06 19:49:45,911 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,912 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime_puls10s', 'value']
2019-04-06 19:49:45,912 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:49:55
2019-04-06 19:49:45,912 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:49:55
2019-04-06 19:49:45,912 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime_puls10s-2019-04-06 19:49:55
2019-04-06 19:49:45,912 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,913 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_yesterday', 'value']
2019-04-06 19:49:45,913 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554393600000
2019-04-06 19:49:45,913 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554393600000
2019-04-06 19:49:45,913 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_yesterday-1554393600000
2019-04-06 19:49:45,913 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,913 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,914 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:49:45,914 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:49:45,914 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyy_mm_dd-20190401-20190407
2019-04-06 19:49:45,914 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,914 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyymmdd', 'value']
2019-04-06 19:49:45,914 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190324
2019-04-06 19:49:45,915 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190324
2019-04-06 19:49:45,915 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyymmdd-20190324
2019-04-06 19:49:45,915 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,915 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyymmdd', 'value']
2019-04-06 19:49:45,915 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190405
2019-04-06 19:49:45,915 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190405
2019-04-06 19:49:45,915 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyymmdd-20190405
2019-04-06 19:49:45,916 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,916 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyymmdd', 'value']
2019-04-06 19:49:45,916 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190330-20190405
2019-04-06 19:49:45,916 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190330-20190405
2019-04-06 19:49:45,916 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyymmdd-20190330-20190405
2019-04-06 19:49:45,916 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,916 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyymmdd', 'value']
2019-04-06 19:49:45,917 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:49:45,917 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:49:45,917 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyymmdd-20190331
2019-04-06 19:49:45,917 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,917 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyymm', 'value']
2019-04-06 19:49:45,917 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201914
2019-04-06 19:49:45,917 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201914
2019-04-06 19:49:45,917 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyymm-201914
2019-04-06 19:49:45,918 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,918 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,918 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25-2019-03-31
2019-04-06 19:49:45,918 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25-2019-03-31
2019-04-06 19:49:45,918 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyy_mm_dd-2019-03-25-2019-03-31
2019-04-06 19:49:45,918 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,918 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,919 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:49:45,919 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:49:45,919 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyy_mm_dd-2019-03-31
2019-04-06 19:49:45,919 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,919 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,919 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-01
2019-04-06 19:49:45,920 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-01
2019-04-06 19:49:45,920 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyy_mm_dd-2019-03-01
2019-04-06 19:49:45,920 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,920 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyymmdd', 'value']
2019-04-06 19:49:45,920 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190430
2019-04-06 19:49:45,920 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190430
2019-04-06 19:49:45,920 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyymmdd-20190430
2019-04-06 19:49:45,920 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,921 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyymm', 'value']
2019-04-06 19:49:45,921 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201812
2019-04-06 19:49:45,921 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201812
2019-04-06 19:49:45,921 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyymm-201812
2019-04-06 19:49:45,921 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,921 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyymmdd', 'value']
2019-04-06 19:49:45,922 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325
2019-04-06 19:49:45,922 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325
2019-04-06 19:49:45,922 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyymmdd-20190325
2019-04-06 19:49:45,922 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,922 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyymmdd', 'value']
2019-04-06 19:49:45,923 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-07-2019-04-05
2019-04-06 19:49:45,923 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-07-2019-04-05
2019-04-06 19:49:45,923 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyymmdd-2019-03-07-2019-04-05
2019-04-06 19:49:45,923 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,923 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,924 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:49:45,924 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:49:45,924 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyy_mm_dd-20190401
2019-04-06 19:49:45,924 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,924 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyymmdd', 'value']
2019-04-06 19:49:45,924 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:49:45,924 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:49:45,925 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyymmdd-20190407
2019-04-06 19:49:45,925 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,925 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,925 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-05-01
2019-04-06 19:49:45,925 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-05-01
2019-04-06 19:49:45,925 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyy_mm_dd-2019-05-01
2019-04-06 19:49:45,925 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,925 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_week_num_yyyyno', 'value']
2019-04-06 19:49:45,926 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201913
2019-04-06 19:49:45,926 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201913
2019-04-06 19:49:45,926 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_week_num_yyyyno-201913
2019-04-06 19:49:45,926 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,926 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime', 'value']
2019-04-06 19:49:45,927 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:49:45
2019-04-06 19:49:45,927 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:49:45
2019-04-06 19:49:45,927 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime-2019-04-06 19:49:45
2019-04-06 19:49:45,927 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,927 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyymmdd', 'value']
2019-04-06 19:49:45,927 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:49:45,927 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:49:45,928 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyymmdd-20190401
2019-04-06 19:49:45,928 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,928 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,928 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-18
2019-04-06 19:49:45,929 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-18
2019-04-06 19:49:45,929 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyy_mm_dd-2019-03-18
2019-04-06 19:49:45,929 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,929 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyy_mm', 'value']
2019-04-06 19:49:45,930 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-14
2019-04-06 19:49:45,930 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-14
2019-04-06 19:49:45,930 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyy_mm-2019-14
2019-04-06 19:49:45,930 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,930 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyymmdd', 'value']
2019-04-06 19:49:45,930 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:49:45,931 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:49:45,931 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:49:45,931 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,931 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,931 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:49:45,931 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:49:45,931 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyy_mm_dd-2019-03-31
2019-04-06 19:49:45,932 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,932 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,932 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:49:45,932 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:49:45,932 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:49:45,932 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,932 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,933 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-30-2019-04-05
2019-04-06 19:49:45,933 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-30-2019-04-05
2019-04-06 19:49:45,933 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyy_mm_dd-2019-03-30-2019-04-05
2019-04-06 19:49:45,933 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,933 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,933 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190307-20190405
2019-04-06 19:49:45,933 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190307-20190405
2019-04-06 19:49:45,934 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyy_mm_dd-20190307-20190405
2019-04-06 19:49:45,934 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,934 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyymmdd', 'value']
2019-04-06 19:49:45,934 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:49:45,934 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:49:45,934 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyymmdd-20190401
2019-04-06 19:49:45,934 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,935 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,935 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-24
2019-04-06 19:49:45,935 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-24
2019-04-06 19:49:45,935 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyy_mm_dd-2019-03-24
2019-04-06 19:49:45,935 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,935 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyy_mm', 'value']
2019-04-06 19:49:45,935 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-12
2019-04-06 19:49:45,936 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-12
2019-04-06 19:49:45,936 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyy_mm-2018-12
2019-04-06 19:49:45,936 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,936 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,936 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-05
2019-04-06 19:49:45,936 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-05
2019-04-06 19:49:45,936 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyy_mm_dd-2019-04-05
2019-04-06 19:49:45,936 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,937 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,937 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25
2019-04-06 19:49:45,937 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25
2019-04-06 19:49:45,937 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyy_mm_dd-2019-03-25
2019-04-06 19:49:45,937 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,937 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:49:45,938 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:49:45,938 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:49:45,938 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyymmdd-20190401-20190407
2019-04-06 19:49:45,938 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,938 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curdate', 'value']
2019-04-06 19:49:45,938 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554480000000
2019-04-06 19:49:45,938 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554480000000
2019-04-06 19:49:45,939 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curdate-1554480000000
2019-04-06 19:49:45,939 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,939 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyymmdd', 'value']
2019-04-06 19:49:45,939 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190406
2019-04-06 19:49:45,939 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190406
2019-04-06 19:49:45,939 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyymmdd-20190406
2019-04-06 19:49:45,939 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,940 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,940 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-30
2019-04-06 19:49:45,940 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-30
2019-04-06 19:49:45,941 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyy_mm_dd-2019-04-30
2019-04-06 19:49:45,941 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,941 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyy_mm', 'value']
2019-04-06 19:49:45,941 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:49:45,942 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:49:45,942 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyy_mm-2018-04
2019-04-06 19:49:45,942 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,942 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,942 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01
2019-04-06 19:49:45,942 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01
2019-04-06 19:49:45,943 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyy_mm_dd-2019-04-01
2019-04-06 19:49:45,943 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,943 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyy_mm_dd', 'value']
2019-04-06 19:49:45,943 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06
2019-04-06 19:49:45,943 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06
2019-04-06 19:49:45,943 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyy_mm_dd-2019-04-06
2019-04-06 19:49:45,943 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,944 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyymmdd', 'value']
2019-04-06 19:49:45,944 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:49:45,944 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:49:45,944 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyymmdd-20190331
2019-04-06 19:49:45,944 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,944 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curtime', 'value']
2019-04-06 19:49:45,945 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554551385000
2019-04-06 19:49:45,945 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554551385000
2019-04-06 19:49:45,945 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curtime-1554551385000
2019-04-06 19:49:45,945 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:49:45,945 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyy_mm', 'value']
2019-04-06 19:49:45,945 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04
2019-04-06 19:49:45,945 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04
2019-04-06 19:49:45,945 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyy_mm-2019-04
2019-04-06 19:49:45,946 APIUnittestTestCase.py[line: 176] INFO: 正在执行断言
2019-04-06 19:49:45,946 unittesttestcase.py[line: 35] INFO: 正在替换“校验模式”中的动态参数
2019-04-06 19:49:45,946 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:49:45,946 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'pre_weekday1_yyyymmdd': '20190318', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_month_yyyymm': '201904', 'curmonth_range_yyyymmdd': '20190401-20190430', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_yyyymm': '201903', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_last_year_yyyymm': '2018-04', 'curtime_puls10s': '2019-04-06 19:49:55', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday7_yyyymmdd': '20190324', 'yesterday_yyyymmdd': '20190405', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyymmdd': '20190331', 'current_week_num_yyyymm': '201914', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_final_day_yyyymmdd': '20190430', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyymmdd': '20190325', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'december_month_last_year_yyyymm': '201812', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'december_month_last_year_yyyy_mm': '2018-12', 'curtime': '2019-04-06 19:49:45', 'weekday1_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyy_mm': '2019-14', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'yesterday_yyyy_mm_dd': '2019-04-05', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyy_mm': '2019-03', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'today_yyyymmdd': '20190406', 'current_month_last_year_yyyy_mm': '2018-04', 'today_yyyy_mm_dd': '2019-04-06', 'last_month_final_day_yyyymmdd': '20190331', 'millisecond_for_curtime': 1554551385000}
2019-04-06 19:49:45,946 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：[
  {
    "模式": "curtime",
    "消息": "fail#请求失败"
  }
]
2019-04-06 19:49:45,946 unittesttestcase.py[line: 38] INFO: 正在替换“校验模式”中的插件函数
2019-04-06 19:49:45,946 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:49:45,947 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:49:45,947 unittesttestcase.py[line: 82] INFO: 校验规则为：“包含字符串：curtime”
2019-04-06 19:49:45,947 test_case_step.py[line: 262] INFO: 正在收集用例步骤运行结果数据
2019-04-06 19:49:45,947 test_case.py[line: 128] ERROR: 'TestCaseStep' object has no attribute 'log_websocket_consumer'
2019-04-06 19:49:45,947 test_case.py[line: 132] INFO: 正在计算运行耗时
2019-04-06 19:49:45,948 test_case.py[line: 138] INFO: 正在记录用例运行结果到测试报告-用例执行明细表
2019-04-06 19:49:45,948 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_case`(execution_num, plan_id, case_id, case_path, case_name, run_result, remark, run_time, time_took) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('1554551385', '1', 2, 'DEMO项目', 'ID2-N_获取时间和日期', '阻塞', "'TestCaseStep' object has no attribute 'log_websocket_consumer'", '2019-04-06 19:49:45', '0天 0小时 0分 0秒')
2019-04-06 19:49:45,986 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID4-N_获取时间和日期, ID:4]======================
2019-04-06 19:49:45,987 test_case.py[line: 32] INFO: 正在查询测试用例[ID：4, 名称：ID4-N_获取时间和日期]关联的测试步骤
2019-04-06 19:49:45,987 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(4,)
2019-04-06 19:49:45,994 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:49:45,995 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 2,  用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:49:45,995 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:49:45,996 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:49:45,996 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:49:45,996 test_case_step.py[line: 203] INFO: 正在替换“输入参数”中的动态参数
2019-04-06 19:49:45,997 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:49:45,997 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'pre_weekday1_yyyymmdd': '20190318', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_month_yyyymm': '201904', 'curmonth_range_yyyymmdd': '20190401-20190430', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_yyyymm': '201903', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_last_year_yyyymm': '2018-04', 'curtime_puls10s': '2019-04-06 19:49:55', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday7_yyyymmdd': '20190324', 'yesterday_yyyymmdd': '20190405', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyymmdd': '20190331', 'current_week_num_yyyymm': '201914', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_final_day_yyyymmdd': '20190430', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyymmdd': '20190325', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'december_month_last_year_yyyymm': '201812', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'december_month_last_year_yyyy_mm': '2018-12', 'curtime': '2019-04-06 19:49:45', 'weekday1_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyy_mm': '2019-14', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'yesterday_yyyy_mm_dd': '2019-04-05', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyy_mm': '2019-03', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'today_yyyymmdd': '20190406', 'current_month_last_year_yyyy_mm': '2018-04', 'today_yyyy_mm_dd': '2019-04-06', 'last_month_final_day_yyyymmdd': '20190331', 'millisecond_for_curtime': 1554551385000}
2019-04-06 19:49:45,998 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：${__read_file("emailPic.png", "rb")}
2019-04-06 19:49:45,998 test_case_step.py[line: 206] INFO: 正在替换“输入参数”中的插件函数
2019-04-06 19:49:45,999 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:['${__read_file("emailPic.png", "rb")}']
2019-04-06 19:49:45,999 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:49:45,999 test_case_step.py[line: 141] INFO: 正在替换插件函数：${__read_file("emailPic.png", "rb")}
2019-04-06 19:49:46,001 pluginfunc.py[line: 31] INFO: 待读取的文件路径为：D:\interface_project_for_dev\testdata\emailPic.png
2019-04-06 19:49:46,003 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:49:46,004 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:49:46,004 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'pre_weekday1_yyyymmdd': '20190318', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_month_yyyymm': '201904', 'curmonth_range_yyyymmdd': '20190401-20190430', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_yyyymm': '201903', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_last_year_yyyymm': '2018-04', 'curtime_puls10s': '2019-04-06 19:49:55', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday7_yyyymmdd': '20190324', 'yesterday_yyyymmdd': '20190405', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyymmdd': '20190331', 'current_week_num_yyyymm': '201914', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_final_day_yyyymmdd': '20190430', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyymmdd': '20190325', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'december_month_last_year_yyyymm': '201812', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'december_month_last_year_yyyy_mm': '2018-12', 'curtime': '2019-04-06 19:49:45', 'weekday1_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyy_mm': '2019-14', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'yesterday_yyyy_mm_dd': '2019-04-05', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyy_mm': '2019-03', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'today_yyyymmdd': '20190406', 'current_month_last_year_yyyy_mm': '2018-04', 'today_yyyy_mm_dd': '2019-04-06', 'last_month_final_day_yyyymmdd': '20190331', 'millisecond_for_curtime': 1554551385000}
2019-04-06 19:49:46,005 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:49:46,005 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:49:46,005 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:49:46,006 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:49:46,006 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:49:46,007 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:49:46,007 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'pre_weekday1_yyyymmdd': '20190318', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'current_month_yyyymm': '201904', 'curmonth_range_yyyymmdd': '20190401-20190430', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_yyyymm': '201903', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_last_year_yyyymm': '2018-04', 'curtime_puls10s': '2019-04-06 19:49:55', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'pre_weekday7_yyyymmdd': '20190324', 'yesterday_yyyymmdd': '20190405', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyymmdd': '20190331', 'current_week_num_yyyymm': '201914', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_final_day_yyyymmdd': '20190430', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyymmdd': '20190325', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'december_month_last_year_yyyymm': '201812', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'december_month_last_year_yyyy_mm': '2018-12', 'curtime': '2019-04-06 19:49:45', 'weekday1_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyy_mm': '2019-14', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'yesterday_yyyy_mm_dd': '2019-04-05', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'current_month_yyyy_mm': '2019-04', 'weekday1_yyyy_mm_dd': '20190401', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyy_mm': '2019-03', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'today_yyyymmdd': '20190406', 'current_month_last_year_yyyy_mm': '2018-04', 'today_yyyy_mm_dd': '2019-04-06', 'last_month_final_day_yyyymmdd': '20190331', 'millisecond_for_curtime': 1554551385000}
2019-04-06 19:49:46,008 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:49:46,009 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:49:46,009 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:49:46,010 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:49:46,011 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:49:46,015 test_case_step.py[line: 262] INFO: 正在收集用例步骤运行结果数据
2019-04-06 19:49:46,016 test_case.py[line: 128] ERROR: 'TestCaseStep' object has no attribute 'log_websocket_consumer'
2019-04-06 19:49:46,016 test_case.py[line: 132] INFO: 正在计算运行耗时
2019-04-06 19:49:46,017 test_case.py[line: 138] INFO: 正在记录用例运行结果到测试报告-用例执行明细表
2019-04-06 19:49:46,017 mydb.py[line: 66] INFO: query：INSERT INTO `website_api_test_report_for_case`(execution_num, plan_id, case_id, case_path, case_name, run_result, remark, run_time, time_took) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s)  data：('1554551385', '1', 4, 'DEMO项目', 'ID4-N_获取时间和日期', '阻塞', "'TestCaseStep' object has no attribute 'log_websocket_consumer'", '2019-04-06 19:49:45', '0天 0小时 0分 0秒')
2019-04-06 19:49:46,049 test_plan.py[line: 59] INFO: 测试用例执行完毕，正在更新测试报告-测试概况表
2019-04-06 19:49:46,049 test_report.py[line: 13] INFO: 正在查询运行状态为：成功的用例记录数
2019-04-06 19:49:46,050 mydb.py[line: 122] INFO: query：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '%s' AND execution_num =%s AND plan_id=%s  data：('成功', '1554551385', '1')
2019-04-06 19:49:46,050 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '成功' AND execution_num =1554551385 AND plan_id=1
2019-04-06 19:49:46,052 test_report.py[line: 13] INFO: 正在查询运行状态为：失败的用例记录数
2019-04-06 19:49:46,052 mydb.py[line: 122] INFO: query：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '%s' AND execution_num =%s AND plan_id=%s  data：('失败', '1554551385', '1')
2019-04-06 19:49:46,052 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '失败' AND execution_num =1554551385 AND plan_id=1
2019-04-06 19:49:46,054 test_report.py[line: 13] INFO: 正在查询运行状态为：阻塞的用例记录数
2019-04-06 19:49:46,054 mydb.py[line: 122] INFO: query：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '%s' AND execution_num =%s AND plan_id=%s  data：('阻塞', '1554551385', '1')
2019-04-06 19:49:46,054 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT COUNT(id) FROM `website_api_test_report_for_case` WHERE run_result = '阻塞' AND execution_num =1554551385 AND plan_id=1
2019-04-06 19:49:46,056 mydb.py[line: 82] INFO: update_query：UPDATE `website_api_test_report_for_summary` SET end_time='2019-04-06 19:49:46', time_took='0天 0小时 0分 0秒', case_total_num=2, case_pass_num=0, case_fail_num=0, case_block_num=2, remark='存在运行失败、被阻塞的用例' WHERE execution_num='1554551385' AND plan_id=1
2019-04-06 19:49:46,096 running_plan.py[line: 107] INFO: 正在释放资源
2019-04-06 19:49:46,097 running_plan.py[line: 108] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:49:46,097 running_plan.py[line: 114] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:49:46,097 main.py[line: 48] INFO: 执行失败，正在更新数据库运行计划的运行状态
2019-04-06 19:49:46,097 mydb.py[line: 82] INFO: update_query：UPDATE `website_running_plan` SET running_status ='运行失败', remark='项目运行失败：计划ID：1，失败原因：存在运行失败、被阻塞的用例   ' WHERE running_plan_num= 1554493626460440
2019-04-06 19:50:01,486 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:50:01,486 main.py[line: 19] INFO: 当前运行模式为：rop
2019-04-06 19:50:01,486 main.py[line: 22] INFO: 当前运行计划编号为：1554493626460440
2019-04-06 19:50:01,486 main.py[line: 32] INFO: 运行单项目,待执行的运行计划编码：1554493626460440
2019-04-06 19:50:01,486 main.py[line: 33] INFO: 正在查询运行计划相关信息
2019-04-06 19:50:01,487 mydb.py[line: 122] INFO: query：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =%s  data：('1554493626460440',)
2019-04-06 19:50:01,487 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =1554493626460440
2019-04-06 19:50:01,489 main.py[line: 40] INFO: 待运行项目：名称：DEMO项目，ID：1，关联的测试计划有：demo测试计划
2019-04-06 19:50:01,489 main.py[line: 43] INFO: ======================开始执行运行计划[名称：demo运行计划]======================
2019-04-06 19:50:01,489 running_plan.py[line: 31] INFO: 正在查询项目[ID：1,名称：DEMO项目]相关信息
2019-04-06 19:50:01,490 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：(1,)
2019-04-06 19:50:01,490 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:50:01,491 running_plan.py[line: 37] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:50:01,491 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:50:01,492 running_plan.py[line: 58] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:50:01,492 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('%s', project_id) != 0 AND locate('%s', env_id) != 0   data：(1, 1)
2019-04-06 19:50:01,494 running_plan.py[line: 84] INFO: ======================开始运行测试项目[名称：DEMO项目, ID：1]======================
2019-04-06 19:50:01,494 test_project.py[line: 102] INFO: ======================正在同步更新与待运行测试计划关联的所有用例树节点信息======================
2019-04-06 19:50:01,494 test_project.py[line: 39] INFO: 待运行计划ID列表：['1']
2019-04-06 19:50:01,494 test_project.py[line: 41] INFO: 正在查询与测试计划关联的用例树节点
2019-04-06 19:50:01,494 mydb.py[line: 152] INFO: query：SELECT node_id FROM `website_api_case_tree_test_plan` WHERE plan_id IN (1) GROUP BY node_id  data：
2019-04-06 19:50:01,496 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:50:01,496 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(1,)
2019-04-06 19:50:01,496 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 1
2019-04-06 19:50:01,498 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:50:01,498 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:50:01,499 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:50:01,500 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='', sub_node_num=2 WHERE plan_id IN (1) AND node_id = 1
2019-04-06 19:50:01,582 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:50:01,583 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(2,)
2019-04-06 19:50:01,583 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 2
2019-04-06 19:50:01,584 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:50:01,585 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:50:01,586 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:50:01,587 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:50:01,589 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:50:01,589 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 2
2019-04-06 19:50:01,636 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:50:01,636 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(4,)
2019-04-06 19:50:01,636 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 4
2019-04-06 19:50:01,638 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:50:01,638 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:50:01,639 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:50:01,640 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:50:01,641 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:50:01,641 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 4
2019-04-06 19:50:01,670 test_project.py[line: 108] INFO: 同步更新与待运行测试计划关联的所有用例树节点信息成功
2019-04-06 19:50:01,670 test_project.py[line: 111] INFO: 正在查询测试计划[ID：1]相关信息
2019-04-06 19:50:01,670 mydb.py[line: 122] INFO: query：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = %s  data：('1',)
2019-04-06 19:50:01,671 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = 1
2019-04-06 19:50:01,672 test_project.py[line: 116] INFO: ======================开始运行测试计划[名称：demo测试计划, ID：1]======================
2019-04-06 19:50:01,673 test_plan.py[line: 30] INFO: 正在查询测试计划关联的测试用例
2019-04-06 19:50:01,673 mydb.py[line: 152] INFO: query：SELECT node_id, node_path, node_name FROM `website_api_case_tree_test_plan` WHERE plan_id = %s AND sub_node_num = 0 ORDER BY `order` ASC  data：('1',)
2019-04-06 19:50:01,675 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID2-N_获取时间和日期, ID:2]======================
2019-04-06 19:50:01,675 test_case.py[line: 32] INFO: 正在查询测试用例[ID：2, 名称：ID2-N_获取时间和日期]关联的测试步骤
2019-04-06 19:50:01,675 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(2,)
2019-04-06 19:50:01,678 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:50:01,678 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 1,  用例ID：2, 用例名称：ID2-N_获取时间和日期）======================
2019-04-06 19:50:01,678 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:50:01,678 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:50:01,679 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:50:01,679 test_case_step.py[line: 169] INFO: 正在替换“请求头”中的动态参数
2019-04-06 19:50:01,679 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:50:01,679 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:50:01,679 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：{
  "fdafa": 13000
}
2019-04-06 19:50:01,680 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:50:01,680 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:50:01,680 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:50:01,680 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:50:01,680 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:50:01,681 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:50:01,681 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:50:01,681 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:50:01,681 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:50:01,681 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:50:01,681 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:50:01,681 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:50:01,681 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:50:01,682 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:50:01,683 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:50:01,683 httpprotocol.py[line: 96] INFO: 发起的请求为：GET http://192.168.0.103:8000/action/getDateAndTime
2019-04-06 19:50:01,683 httpprotocol.py[line: 97] INFO: 请求头为：OrderedDict([('fdafa', 13000)])
2019-04-06 19:50:02,132 APIUnittestTestCase.py[line: 147] INFO: 正在对服务器返回body进行解码
2019-04-06 19:50:02,133 APIUnittestTestCase.py[line: 166] INFO: 服务器返回结果"响应体(body)": {"curmonth_range_yyyymmdd": "20190401-20190430", "last_weekday7_yyyy_mm_dd": "2019-03-31", "last_weekday1_yyyy_mm_dd": "2019-03-25", "lastmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "weekday1_yyyymmdd": "20190401", "current_month_yyyy_mm": "2019-04", "today_yyyy_mm_dd": "2019-04-06", "recent_30day_range_yyyy_mm_dd": "20190307-20190405", "next_month_first_day_yyyy_mm_dd": "2019-05-01", "current_month_last_year_yyyy_mm": "2018-04", "last_week_num_yyyyno": "201913", "weekday7_yyyymmdd": "20190407", "weekday1_to_weekday7_yyyymmdd": "20190401-20190407", "current_month_last_year_yyyymm": "2018-04", "last_weekday1_to_weekday7_yyyymmdd": "20190325-20190331", "weekday1_yyyy_mm_dd": "20190401", "curtime": "2019-04-06 19:50:01", "today_yyyymmdd": "20190406", "curmonth_first_day_yyyy_mm_dd": "2019-04-01", "pre_weekday7_yyyymmdd": "20190324", "last_weekday1_yyyymmdd": "20190325", "recent_7day_range_yyyymmdd": "20190330-20190405", "last_month_yyyymm": "201903", "millisecond_for_curdate": 1554480000000, "december_month_last_year_yyyymm": "201812", "pre_weekday1_yyyymmdd": "20190318", "weekday7_yyyy_mm_dd": "20190407", "current_week_num_yyyymm": "201914", "next_month_first_day_yyyymmdd": "20190501", "curtime_puls10s": "2019-04-06 19:50:11", "yesterday_yyyy_mm_dd": "2019-04-05", "december_month_last_year_yyyy_mm": "2018-12", "yesterday_yyyymmdd": "20190405", "curmonth_final_day_yyyymmdd": "20190430", "lastmonth_range_yyyymmdd": "20190401-20190430", "last_weekday1_to_weekday7_yyyy_mm_dd": "2019-03-25-2019-03-31", "pre_weekday1_yyyy_mm_dd": "2019-03-18", "last_month_yyyy_mm": "2019-03", "last_month_final_day_yyyy_mm_dd": "2019-03-31", "weekday1_to_weekday7_yyyy_mm_dd": "20190401-20190407", "current_month_yyyymm": "201904", "millisecond_for_yesterday": 1554393600000, "recent_30day_range_yyyymmdd": "2019-03-07-2019-04-05", "curmonth_final_day_yyyy_mm_dd": "2019-04-30", "last_month_first_day_yyyymmdd": "20190301", "recent_7day_range_yyyy_mm_dd": "2019-03-30-2019-04-05", "current_week_num_yyyy_mm": "2019-14", "last_month_first_day_yyyy_mm_dd": "2019-03-01", "last_month_final_day_yyyymmdd": "20190331", "curmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "millisecond_for_curtime": 1554551401000, "last_weekday7_yyyymmdd": "20190331", "pre_weekday7_yyyy_mm_dd": "2019-03-24", "curmonth_first_day_yyyymmdd": "20190401"}
2019-04-06 19:50:02,133 APIUnittestTestCase.py[line: 167] INFO: 服务器返回结果"请求头(headers)": [('Content-Length', '2339'), ('Content-Type', 'text/html; charset=utf-8'), ('Connection', 'close'), ('X-Frame-Options', 'SAMEORIGIN')]
2019-04-06 19:50:02,133 APIUnittestTestCase.py[line: 168] INFO: 服务器返回结果"状态码(code)": 200
2019-04-06 19:50:02,133 APIUnittestTestCase.py[line: 173] INFO: 正在提取目标返回结果值
2019-04-06 19:50:02,133 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,134 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyymmdd', 'value']
2019-04-06 19:50:02,134 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190430
2019-04-06 19:50:02,134 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190430
2019-04-06 19:50:02,134 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyymmdd-20190430
2019-04-06 19:50:02,134 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,134 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyy_mm', 'value']
2019-04-06 19:50:02,135 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-14
2019-04-06 19:50:02,135 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-14
2019-04-06 19:50:02,135 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyy_mm-2019-14
2019-04-06 19:50:02,137 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,137 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,137 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-05-01
2019-04-06 19:50:02,137 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-05-01
2019-04-06 19:50:02,137 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyy_mm_dd-2019-05-01
2019-04-06 19:50:02,138 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,138 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyy_mm', 'value']
2019-04-06 19:50:02,138 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04
2019-04-06 19:50:02,138 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04
2019-04-06 19:50:02,138 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyy_mm-2019-04
2019-04-06 19:50:02,138 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,138 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyymmdd', 'value']
2019-04-06 19:50:02,139 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190318
2019-04-06 19:50:02,139 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190318
2019-04-06 19:50:02,139 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyymmdd-20190318
2019-04-06 19:50:02,139 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,139 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:50:02,139 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325-20190331
2019-04-06 19:50:02,139 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325-20190331
2019-04-06 19:50:02,140 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyymmdd-20190325-20190331
2019-04-06 19:50:02,140 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,140 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,140 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-30-2019-04-05
2019-04-06 19:50:02,140 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-30-2019-04-05
2019-04-06 19:50:02,140 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyy_mm_dd-2019-03-30-2019-04-05
2019-04-06 19:50:02,141 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,141 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,141 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-24
2019-04-06 19:50:02,141 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-24
2019-04-06 19:50:02,141 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyy_mm_dd-2019-03-24
2019-04-06 19:50:02,141 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,141 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyymmdd', 'value']
2019-04-06 19:50:02,142 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:50:02,142 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:50:02,142 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyymmdd-20190407
2019-04-06 19:50:02,142 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,142 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,142 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-01
2019-04-06 19:50:02,142 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-01
2019-04-06 19:50:02,142 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyy_mm_dd-2019-03-01
2019-04-06 19:50:02,143 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,143 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyymmdd', 'value']
2019-04-06 19:50:02,143 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190301
2019-04-06 19:50:02,143 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190301
2019-04-06 19:50:02,143 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyymmdd-20190301
2019-04-06 19:50:02,143 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,143 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,144 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06
2019-04-06 19:50:02,144 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06
2019-04-06 19:50:02,144 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyy_mm_dd-2019-04-06
2019-04-06 19:50:02,144 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,144 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyy_mm', 'value']
2019-04-06 19:50:02,144 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:50:02,144 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:50:02,145 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyy_mm-2018-04
2019-04-06 19:50:02,145 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,145 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime', 'value']
2019-04-06 19:50:02,145 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:50:01
2019-04-06 19:50:02,145 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:50:01
2019-04-06 19:50:02,145 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime-2019-04-06 19:50:01
2019-04-06 19:50:02,145 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,146 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyymm', 'value']
2019-04-06 19:50:02,146 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:50:02,146 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:50:02,146 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyymm-2018-04
2019-04-06 19:50:02,146 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,146 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyymmdd', 'value']
2019-04-06 19:50:02,146 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:50:02,146 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:50:02,147 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyymmdd-20190331
2019-04-06 19:50:02,147 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,147 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,147 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25-2019-03-31
2019-04-06 19:50:02,147 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25-2019-03-31
2019-04-06 19:50:02,147 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyy_mm_dd-2019-03-25-2019-03-31
2019-04-06 19:50:02,147 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,148 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curtime', 'value']
2019-04-06 19:50:02,148 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554551401000
2019-04-06 19:50:02,148 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554551401000
2019-04-06 19:50:02,148 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curtime-1554551401000
2019-04-06 19:50:02,148 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,148 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyymmdd', 'value']
2019-04-06 19:50:02,148 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190405
2019-04-06 19:50:02,149 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190405
2019-04-06 19:50:02,149 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyymmdd-20190405
2019-04-06 19:50:02,149 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,149 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyymmdd', 'value']
2019-04-06 19:50:02,149 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-07-2019-04-05
2019-04-06 19:50:02,149 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-07-2019-04-05
2019-04-06 19:50:02,149 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyymmdd-2019-03-07-2019-04-05
2019-04-06 19:50:02,150 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,150 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyymmdd', 'value']
2019-04-06 19:50:02,150 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:50:02,150 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:50:02,150 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:50:02,150 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,150 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyymmdd', 'value']
2019-04-06 19:50:02,151 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:50:02,151 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:50:02,151 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyymmdd-20190401
2019-04-06 19:50:02,151 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,151 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,151 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:50:02,151 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:50:02,151 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:50:02,152 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,152 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,152 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190307-20190405
2019-04-06 19:50:02,152 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190307-20190405
2019-04-06 19:50:02,152 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyy_mm_dd-20190307-20190405
2019-04-06 19:50:02,152 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,152 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyymmdd', 'value']
2019-04-06 19:50:02,153 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:50:02,153 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:50:02,153 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyymmdd-20190401
2019-04-06 19:50:02,153 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,153 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curdate', 'value']
2019-04-06 19:50:02,154 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554480000000
2019-04-06 19:50:02,154 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554480000000
2019-04-06 19:50:02,154 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curdate-1554480000000
2019-04-06 19:50:02,154 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,155 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,155 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:50:02,155 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:50:02,155 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:50:02,155 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,155 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyy_mm', 'value']
2019-04-06 19:50:02,155 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-12
2019-04-06 19:50:02,155 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-12
2019-04-06 19:50:02,156 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyy_mm-2018-12
2019-04-06 19:50:02,156 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,156 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_yesterday', 'value']
2019-04-06 19:50:02,156 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554393600000
2019-04-06 19:50:02,156 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554393600000
2019-04-06 19:50:02,156 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_yesterday-1554393600000
2019-04-06 19:50:02,156 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,157 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyymmdd', 'value']
2019-04-06 19:50:02,157 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190406
2019-04-06 19:50:02,157 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190406
2019-04-06 19:50:02,157 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyymmdd-20190406
2019-04-06 19:50:02,157 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,157 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,157 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-30
2019-04-06 19:50:02,158 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-30
2019-04-06 19:50:02,158 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyy_mm_dd-2019-04-30
2019-04-06 19:50:02,158 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,158 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime_puls10s', 'value']
2019-04-06 19:50:02,158 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:50:11
2019-04-06 19:50:02,158 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:50:11
2019-04-06 19:50:02,158 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime_puls10s-2019-04-06 19:50:11
2019-04-06 19:50:02,158 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,159 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:50:02,159 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:50:02,159 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:50:02,159 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyymmdd-20190401-20190407
2019-04-06 19:50:02,159 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,159 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyymm', 'value']
2019-04-06 19:50:02,160 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201904
2019-04-06 19:50:02,160 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201904
2019-04-06 19:50:02,160 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyymm-201904
2019-04-06 19:50:02,160 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,160 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_week_num_yyyyno', 'value']
2019-04-06 19:50:02,160 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201913
2019-04-06 19:50:02,160 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201913
2019-04-06 19:50:02,161 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_week_num_yyyyno-201913
2019-04-06 19:50:02,161 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,161 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyymm', 'value']
2019-04-06 19:50:02,161 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201812
2019-04-06 19:50:02,161 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201812
2019-04-06 19:50:02,161 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyymm-201812
2019-04-06 19:50:02,161 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,161 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,162 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:50:02,162 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:50:02,162 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyy_mm_dd-2019-03-31
2019-04-06 19:50:02,162 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,162 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyymmdd', 'value']
2019-04-06 19:50:02,162 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190324
2019-04-06 19:50:02,162 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190324
2019-04-06 19:50:02,163 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyymmdd-20190324
2019-04-06 19:50:02,163 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,163 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,163 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:50:02,164 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:50:02,164 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyy_mm_dd-20190401
2019-04-06 19:50:02,164 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,164 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyymmdd', 'value']
2019-04-06 19:50:02,164 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:50:02,165 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:50:02,165 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyymmdd-20190331
2019-04-06 19:50:02,165 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,165 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyymm', 'value']
2019-04-06 19:50:02,165 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201903
2019-04-06 19:50:02,165 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201903
2019-04-06 19:50:02,165 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyymm-201903
2019-04-06 19:50:02,166 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,166 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,166 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01
2019-04-06 19:50:02,166 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01
2019-04-06 19:50:02,166 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyy_mm_dd-2019-04-01
2019-04-06 19:50:02,166 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,166 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyymmdd', 'value']
2019-04-06 19:50:02,167 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325
2019-04-06 19:50:02,167 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325
2019-04-06 19:50:02,167 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyymmdd-20190325
2019-04-06 19:50:02,167 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,167 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,167 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-05
2019-04-06 19:50:02,167 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-05
2019-04-06 19:50:02,168 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyy_mm_dd-2019-04-05
2019-04-06 19:50:02,168 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,168 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyymmdd', 'value']
2019-04-06 19:50:02,168 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190330-20190405
2019-04-06 19:50:02,168 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190330-20190405
2019-04-06 19:50:02,168 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyymmdd-20190330-20190405
2019-04-06 19:50:02,168 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,169 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,169 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-18
2019-04-06 19:50:02,169 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-18
2019-04-06 19:50:02,169 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyy_mm_dd-2019-03-18
2019-04-06 19:50:02,169 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,169 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyymm', 'value']
2019-04-06 19:50:02,169 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201914
2019-04-06 19:50:02,170 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201914
2019-04-06 19:50:02,170 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyymm-201914
2019-04-06 19:50:02,170 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,170 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,170 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:50:02,170 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:50:02,170 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyy_mm_dd-20190401-20190407
2019-04-06 19:50:02,171 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,171 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyymmdd', 'value']
2019-04-06 19:50:02,171 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:50:02,171 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:50:02,171 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:50:02,171 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,171 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,172 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25
2019-04-06 19:50:02,172 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25
2019-04-06 19:50:02,172 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyy_mm_dd-2019-03-25
2019-04-06 19:50:02,172 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,172 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,172 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:50:02,172 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:50:02,173 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyy_mm_dd-2019-03-31
2019-04-06 19:50:02,173 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,173 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyymmdd', 'value']
2019-04-06 19:50:02,173 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190501
2019-04-06 19:50:02,173 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190501
2019-04-06 19:50:02,173 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyymmdd-20190501
2019-04-06 19:50:02,173 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,174 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:50:02,174 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:50:02,174 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:50:02,174 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyy_mm_dd-20190407
2019-04-06 19:50:02,174 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:50:02,174 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyy_mm', 'value']
2019-04-06 19:50:02,174 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03
2019-04-06 19:50:02,175 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03
2019-04-06 19:50:02,175 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyy_mm-2019-03
2019-04-06 19:50:02,175 APIUnittestTestCase.py[line: 176] INFO: 正在执行断言
2019-04-06 19:50:02,175 unittesttestcase.py[line: 35] INFO: 正在替换“校验模式”中的动态参数
2019-04-06 19:50:02,175 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:50:02,175 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_final_day_yyyymmdd': '20190430', 'current_week_num_yyyy_mm': '2019-14', 'pre_weekday1_yyyymmdd': '20190318', 'millisecond_for_curtime': 1554551401000, 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'current_month_last_year_yyyy_mm': '2018-04', 'curtime': '2019-04-06 19:50:01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'current_month_yyyy_mm': '2019-04', 'yesterday_yyyymmdd': '20190405', 'last_week_num_yyyyno': '201913', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_month_first_day_yyyymmdd': '20190301', 'december_month_last_year_yyyymm': '201812', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyymmdd': '20190401', 'december_month_last_year_yyyy_mm': '2018-12', 'millisecond_for_yesterday': 1554393600000, 'today_yyyymmdd': '20190406', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'last_weekday7_yyyymmdd': '20190331', 'current_month_last_year_yyyymm': '2018-04', 'current_month_yyyymm': '201904', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'curtime_puls10s': '2019-04-06 19:50:11', 'pre_weekday7_yyyymmdd': '20190324', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_yyyymm': '201903', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_yyyy_mm': '2019-03'}
2019-04-06 19:50:02,175 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：[
  {
    "模式": "curtime",
    "消息": "fail#请求失败"
  }
]
2019-04-06 19:50:02,176 unittesttestcase.py[line: 38] INFO: 正在替换“校验模式”中的插件函数
2019-04-06 19:50:02,176 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:50:02,176 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:50:02,176 unittesttestcase.py[line: 82] INFO: 校验规则为：“包含字符串：curtime”
2019-04-06 19:50:02,177 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID4-N_获取时间和日期, ID:4]======================
2019-04-06 19:50:02,177 test_case.py[line: 32] INFO: 正在查询测试用例[ID：4, 名称：ID4-N_获取时间和日期]关联的测试步骤
2019-04-06 19:50:02,177 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(4,)
2019-04-06 19:50:02,179 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:50:02,179 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 2,  用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:50:02,179 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:50:02,179 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:50:02,180 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:50:02,180 test_case_step.py[line: 203] INFO: 正在替换“输入参数”中的动态参数
2019-04-06 19:50:02,180 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:50:02,180 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_final_day_yyyymmdd': '20190430', 'current_week_num_yyyy_mm': '2019-14', 'pre_weekday1_yyyymmdd': '20190318', 'millisecond_for_curtime': 1554551401000, 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'current_month_last_year_yyyy_mm': '2018-04', 'curtime': '2019-04-06 19:50:01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'current_month_yyyy_mm': '2019-04', 'yesterday_yyyymmdd': '20190405', 'last_week_num_yyyyno': '201913', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_month_first_day_yyyymmdd': '20190301', 'december_month_last_year_yyyymm': '201812', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyymmdd': '20190401', 'december_month_last_year_yyyy_mm': '2018-12', 'millisecond_for_yesterday': 1554393600000, 'today_yyyymmdd': '20190406', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'last_weekday7_yyyymmdd': '20190331', 'current_month_last_year_yyyymm': '2018-04', 'current_month_yyyymm': '201904', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'curtime_puls10s': '2019-04-06 19:50:11', 'pre_weekday7_yyyymmdd': '20190324', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_yyyymm': '201903', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_yyyy_mm': '2019-03'}
2019-04-06 19:50:02,180 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：${__read_file("emailPic.png", "rb")}
2019-04-06 19:50:02,180 test_case_step.py[line: 206] INFO: 正在替换“输入参数”中的插件函数
2019-04-06 19:50:02,180 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:['${__read_file("emailPic.png", "rb")}']
2019-04-06 19:50:02,181 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:50:02,181 test_case_step.py[line: 141] INFO: 正在替换插件函数：${__read_file("emailPic.png", "rb")}
2019-04-06 19:50:02,181 pluginfunc.py[line: 31] INFO: 待读取的文件路径为：D:\interface_project_for_dev\testdata\emailPic.png
2019-04-06 19:50:02,182 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:50:02,182 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:50:02,184 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_final_day_yyyymmdd': '20190430', 'current_week_num_yyyy_mm': '2019-14', 'pre_weekday1_yyyymmdd': '20190318', 'millisecond_for_curtime': 1554551401000, 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'current_month_last_year_yyyy_mm': '2018-04', 'curtime': '2019-04-06 19:50:01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'current_month_yyyy_mm': '2019-04', 'yesterday_yyyymmdd': '20190405', 'last_week_num_yyyyno': '201913', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_month_first_day_yyyymmdd': '20190301', 'december_month_last_year_yyyymm': '201812', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyymmdd': '20190401', 'december_month_last_year_yyyy_mm': '2018-12', 'millisecond_for_yesterday': 1554393600000, 'today_yyyymmdd': '20190406', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'last_weekday7_yyyymmdd': '20190331', 'current_month_last_year_yyyymm': '2018-04', 'current_month_yyyymm': '201904', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'curtime_puls10s': '2019-04-06 19:50:11', 'pre_weekday7_yyyymmdd': '20190324', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_yyyymm': '201903', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_yyyy_mm': '2019-03'}
2019-04-06 19:50:02,184 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:50:02,184 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:50:02,184 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:50:02,184 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:50:02,185 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:50:02,185 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:50:02,185 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'curmonth_final_day_yyyymmdd': '20190430', 'current_week_num_yyyy_mm': '2019-14', 'pre_weekday1_yyyymmdd': '20190318', 'millisecond_for_curtime': 1554551401000, 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'weekday7_yyyymmdd': '20190407', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'current_month_last_year_yyyy_mm': '2018-04', 'curtime': '2019-04-06 19:50:01', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'current_month_yyyy_mm': '2019-04', 'yesterday_yyyymmdd': '20190405', 'last_week_num_yyyyno': '201913', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_month_first_day_yyyymmdd': '20190301', 'december_month_last_year_yyyymm': '201812', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyymmdd': '20190401', 'december_month_last_year_yyyy_mm': '2018-12', 'millisecond_for_yesterday': 1554393600000, 'today_yyyymmdd': '20190406', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'last_weekday7_yyyymmdd': '20190331', 'current_month_last_year_yyyymm': '2018-04', 'current_month_yyyymm': '201904', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'curtime_puls10s': '2019-04-06 19:50:11', 'pre_weekday7_yyyymmdd': '20190324', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'weekday1_yyyy_mm_dd': '20190401', 'last_month_final_day_yyyymmdd': '20190331', 'last_month_yyyymm': '201903', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyymmdd': '20190501', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'last_month_yyyy_mm': '2019-03'}
2019-04-06 19:50:02,185 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:50:02,185 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:50:02,185 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:50:02,185 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:50:02,186 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:50:05,187 test_case.py[line: 104] ERROR: 执行用例测试步骤失败，正在进行第 1 次重试（第 1 步, 步骤ID: 2, 用例ID：4, 用例名称：ID4-N_获取时间和日期）
2019-04-06 19:50:05,187 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:50:05,188 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:50:05,189 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:50:05,189 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:50:05,192 test_case.py[line: 112] ERROR: 执行用例测试步骤运行失败（第 1 步, 步骤ID: 2， 用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:50:05,192 running_plan.py[line: 107] INFO: 正在释放资源
2019-04-06 19:50:05,193 running_plan.py[line: 108] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:50:05,193 running_plan.py[line: 114] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:50:05,194 main.py[line: 48] INFO: 执行失败，正在更新数据库运行计划的运行状态
2019-04-06 19:51:38,852 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:51:38,853 main.py[line: 19] INFO: 当前运行模式为：rop
2019-04-06 19:51:38,854 main.py[line: 22] INFO: 当前运行计划编号为：1554493626460440
2019-04-06 19:51:38,854 main.py[line: 32] INFO: 运行单项目,待执行的运行计划编码：1554493626460440
2019-04-06 19:51:38,855 main.py[line: 33] INFO: 正在查询运行计划相关信息
2019-04-06 19:51:38,856 mydb.py[line: 122] INFO: query：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =%s  data：('1554493626460440',)
2019-04-06 19:51:38,856 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =1554493626460440
2019-04-06 19:51:38,862 main.py[line: 40] INFO: 待运行项目：名称：DEMO项目，ID：1，关联的测试计划有：demo测试计划
2019-04-06 19:51:38,863 main.py[line: 43] INFO: ======================开始执行运行计划[名称：demo运行计划]======================
2019-04-06 19:51:38,863 running_plan.py[line: 31] INFO: 正在查询项目[ID：1,名称：DEMO项目]相关信息
2019-04-06 19:51:38,864 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：(1,)
2019-04-06 19:51:38,865 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:51:38,881 running_plan.py[line: 37] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:51:38,883 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:51:38,888 running_plan.py[line: 58] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:51:38,889 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('%s', project_id) != 0 AND locate('%s', env_id) != 0   data：(1, 1)
2019-04-06 19:51:38,894 running_plan.py[line: 84] INFO: ======================开始运行测试项目[名称：DEMO项目, ID：1]======================
2019-04-06 19:51:38,895 test_project.py[line: 102] INFO: ======================正在同步更新与待运行测试计划关联的所有用例树节点信息======================
2019-04-06 19:51:38,895 test_project.py[line: 39] INFO: 待运行计划ID列表：['1']
2019-04-06 19:51:38,896 test_project.py[line: 41] INFO: 正在查询与测试计划关联的用例树节点
2019-04-06 19:51:38,897 mydb.py[line: 152] INFO: query：SELECT node_id FROM `website_api_case_tree_test_plan` WHERE plan_id IN (1) GROUP BY node_id  data：
2019-04-06 19:51:38,900 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:51:38,901 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(1,)
2019-04-06 19:51:38,902 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 1
2019-04-06 19:51:38,906 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:51:38,906 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:51:38,909 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:51:38,910 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='', sub_node_num=2 WHERE plan_id IN (1) AND node_id = 1
2019-04-06 19:51:38,951 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:51:38,952 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(2,)
2019-04-06 19:51:38,953 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 2
2019-04-06 19:51:38,957 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:51:38,958 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:51:38,961 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:51:38,962 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:51:38,966 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:51:38,966 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 2
2019-04-06 19:51:39,003 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:51:39,005 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(4,)
2019-04-06 19:51:39,007 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 4
2019-04-06 19:51:39,019 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:51:39,021 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:51:39,030 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:51:39,031 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:51:39,035 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:51:39,036 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 4
2019-04-06 19:51:39,094 test_project.py[line: 108] INFO: 同步更新与待运行测试计划关联的所有用例树节点信息成功
2019-04-06 19:51:39,096 test_project.py[line: 111] INFO: 正在查询测试计划[ID：1]相关信息
2019-04-06 19:51:39,097 mydb.py[line: 122] INFO: query：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = %s  data：('1',)
2019-04-06 19:51:39,098 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = 1
2019-04-06 19:51:39,103 test_project.py[line: 116] INFO: ======================开始运行测试计划[名称：demo测试计划, ID：1]======================
2019-04-06 19:51:39,104 test_plan.py[line: 30] INFO: 正在查询测试计划关联的测试用例
2019-04-06 19:51:39,106 mydb.py[line: 152] INFO: query：SELECT node_id, node_path, node_name FROM `website_api_case_tree_test_plan` WHERE plan_id = %s AND sub_node_num = 0 ORDER BY `order` ASC  data：('1',)
2019-04-06 19:51:39,111 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID2-N_获取时间和日期, ID:2]======================
2019-04-06 19:51:39,112 test_case.py[line: 32] INFO: 正在查询测试用例[ID：2, 名称：ID2-N_获取时间和日期]关联的测试步骤
2019-04-06 19:51:39,113 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(2,)
2019-04-06 19:51:39,124 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:51:39,125 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 1,  用例ID：2, 用例名称：ID2-N_获取时间和日期）======================
2019-04-06 19:51:39,126 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:51:39,127 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:51:39,128 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:51:39,129 test_case_step.py[line: 169] INFO: 正在替换“请求头”中的动态参数
2019-04-06 19:51:39,131 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:51:39,132 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:51:39,133 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：{
  "fdafa": 13000
}
2019-04-06 19:51:39,134 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:51:39,135 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:51:39,137 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:51:39,137 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:51:39,138 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:51:39,142 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:51:39,143 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:51:39,143 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:51:39,144 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:51:39,145 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:51:39,146 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:51:39,147 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:51:39,147 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:51:39,148 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:51:39,150 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:51:39,151 httpprotocol.py[line: 96] INFO: 发起的请求为：GET http://192.168.0.103:8000/action/getDateAndTime
2019-04-06 19:51:39,152 httpprotocol.py[line: 97] INFO: 请求头为：OrderedDict([('fdafa', 13000)])
2019-04-06 19:51:39,645 APIUnittestTestCase.py[line: 147] INFO: 正在对服务器返回body进行解码
2019-04-06 19:51:39,648 APIUnittestTestCase.py[line: 166] INFO: 服务器返回结果"响应体(body)": {"curmonth_range_yyyymmdd": "20190401-20190430", "last_weekday7_yyyy_mm_dd": "2019-03-31", "last_weekday1_yyyy_mm_dd": "2019-03-25", "lastmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "weekday1_yyyymmdd": "20190401", "current_month_yyyy_mm": "2019-04", "today_yyyy_mm_dd": "2019-04-06", "recent_30day_range_yyyy_mm_dd": "20190307-20190405", "next_month_first_day_yyyy_mm_dd": "2019-05-01", "current_month_last_year_yyyy_mm": "2018-04", "last_week_num_yyyyno": "201913", "weekday7_yyyymmdd": "20190407", "weekday1_to_weekday7_yyyymmdd": "20190401-20190407", "current_month_last_year_yyyymm": "2018-04", "last_weekday1_to_weekday7_yyyymmdd": "20190325-20190331", "weekday1_yyyy_mm_dd": "20190401", "curtime": "2019-04-06 19:51:39", "today_yyyymmdd": "20190406", "curmonth_first_day_yyyy_mm_dd": "2019-04-01", "pre_weekday7_yyyymmdd": "20190324", "last_weekday1_yyyymmdd": "20190325", "recent_7day_range_yyyymmdd": "20190330-20190405", "last_month_yyyymm": "201903", "millisecond_for_curdate": 1554480000000, "december_month_last_year_yyyymm": "201812", "pre_weekday1_yyyymmdd": "20190318", "weekday7_yyyy_mm_dd": "20190407", "current_week_num_yyyymm": "201914", "next_month_first_day_yyyymmdd": "20190501", "curtime_puls10s": "2019-04-06 19:51:49", "yesterday_yyyy_mm_dd": "2019-04-05", "december_month_last_year_yyyy_mm": "2018-12", "yesterday_yyyymmdd": "20190405", "curmonth_final_day_yyyymmdd": "20190430", "lastmonth_range_yyyymmdd": "20190401-20190430", "last_weekday1_to_weekday7_yyyy_mm_dd": "2019-03-25-2019-03-31", "pre_weekday1_yyyy_mm_dd": "2019-03-18", "last_month_yyyy_mm": "2019-03", "last_month_final_day_yyyy_mm_dd": "2019-03-31", "weekday1_to_weekday7_yyyy_mm_dd": "20190401-20190407", "current_month_yyyymm": "201904", "millisecond_for_yesterday": 1554393600000, "recent_30day_range_yyyymmdd": "2019-03-07-2019-04-05", "curmonth_final_day_yyyy_mm_dd": "2019-04-30", "last_month_first_day_yyyymmdd": "20190301", "recent_7day_range_yyyy_mm_dd": "2019-03-30-2019-04-05", "current_week_num_yyyy_mm": "2019-14", "last_month_first_day_yyyy_mm_dd": "2019-03-01", "last_month_final_day_yyyymmdd": "20190331", "curmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "millisecond_for_curtime": 1554551499000, "last_weekday7_yyyymmdd": "20190331", "pre_weekday7_yyyy_mm_dd": "2019-03-24", "curmonth_first_day_yyyymmdd": "20190401"}
2019-04-06 19:51:39,649 APIUnittestTestCase.py[line: 167] INFO: 服务器返回结果"请求头(headers)": [('Content-Length', '2339'), ('Content-Type', 'text/html; charset=utf-8'), ('Connection', 'close'), ('X-Frame-Options', 'SAMEORIGIN')]
2019-04-06 19:51:39,650 APIUnittestTestCase.py[line: 168] INFO: 服务器返回结果"状态码(code)": 200
2019-04-06 19:51:39,651 APIUnittestTestCase.py[line: 173] INFO: 正在提取目标返回结果值
2019-04-06 19:51:39,652 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,652 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,653 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-05
2019-04-06 19:51:39,654 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-05
2019-04-06 19:51:39,655 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyy_mm_dd-2019-04-05
2019-04-06 19:51:39,655 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,656 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyymmdd', 'value']
2019-04-06 19:51:39,657 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190301
2019-04-06 19:51:39,657 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190301
2019-04-06 19:51:39,658 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyymmdd-20190301
2019-04-06 19:51:39,659 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,659 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyymmdd', 'value']
2019-04-06 19:51:39,660 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190501
2019-04-06 19:51:39,661 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190501
2019-04-06 19:51:39,662 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyymmdd-20190501
2019-04-06 19:51:39,662 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,664 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,665 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01
2019-04-06 19:51:39,666 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01
2019-04-06 19:51:39,667 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyy_mm_dd-2019-04-01
2019-04-06 19:51:39,667 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,668 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,669 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-24
2019-04-06 19:51:39,669 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-24
2019-04-06 19:51:39,670 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyy_mm_dd-2019-03-24
2019-04-06 19:51:39,671 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,672 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,673 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:51:39,673 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:51:39,674 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyy_mm_dd-2019-03-31
2019-04-06 19:51:39,675 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,675 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,676 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:51:39,677 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:51:39,678 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:51:39,678 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,679 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyy_mm', 'value']
2019-04-06 19:51:39,680 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-12
2019-04-06 19:51:39,682 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-12
2019-04-06 19:51:39,683 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyy_mm-2018-12
2019-04-06 19:51:39,684 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,685 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyymm', 'value']
2019-04-06 19:51:39,687 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201904
2019-04-06 19:51:39,687 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201904
2019-04-06 19:51:39,688 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyymm-201904
2019-04-06 19:51:39,689 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,690 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyy_mm', 'value']
2019-04-06 19:51:39,690 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-14
2019-04-06 19:51:39,691 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-14
2019-04-06 19:51:39,692 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyy_mm-2019-14
2019-04-06 19:51:39,692 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,693 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,694 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190307-20190405
2019-04-06 19:51:39,695 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190307-20190405
2019-04-06 19:51:39,696 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyy_mm_dd-20190307-20190405
2019-04-06 19:51:39,696 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,697 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,698 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-01
2019-04-06 19:51:39,699 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-01
2019-04-06 19:51:39,699 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyy_mm_dd-2019-03-01
2019-04-06 19:51:39,700 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,701 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curdate', 'value']
2019-04-06 19:51:39,703 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554480000000
2019-04-06 19:51:39,704 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554480000000
2019-04-06 19:51:39,706 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curdate-1554480000000
2019-04-06 19:51:39,707 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,708 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyymmdd', 'value']
2019-04-06 19:51:39,709 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190430
2019-04-06 19:51:39,710 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190430
2019-04-06 19:51:39,711 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyymmdd-20190430
2019-04-06 19:51:39,712 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,713 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,714 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-18
2019-04-06 19:51:39,715 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-18
2019-04-06 19:51:39,715 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyy_mm_dd-2019-03-18
2019-04-06 19:51:39,716 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,717 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyymmdd', 'value']
2019-04-06 19:51:39,717 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:51:39,718 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:51:39,719 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyymmdd-20190401
2019-04-06 19:51:39,719 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,720 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyymmdd', 'value']
2019-04-06 19:51:39,721 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190330-20190405
2019-04-06 19:51:39,722 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190330-20190405
2019-04-06 19:51:39,722 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyymmdd-20190330-20190405
2019-04-06 19:51:39,723 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,724 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_week_num_yyyyno', 'value']
2019-04-06 19:51:39,725 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201913
2019-04-06 19:51:39,726 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201913
2019-04-06 19:51:39,727 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_week_num_yyyyno-201913
2019-04-06 19:51:39,729 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,730 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,731 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06
2019-04-06 19:51:39,731 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06
2019-04-06 19:51:39,732 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyy_mm_dd-2019-04-06
2019-04-06 19:51:39,733 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,733 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyymm', 'value']
2019-04-06 19:51:39,734 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201914
2019-04-06 19:51:39,735 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201914
2019-04-06 19:51:39,735 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyymm-201914
2019-04-06 19:51:39,736 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,737 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:51:39,737 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:51:39,738 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:51:39,739 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyymmdd-20190401-20190407
2019-04-06 19:51:39,739 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,740 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyymm', 'value']
2019-04-06 19:51:39,741 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201903
2019-04-06 19:51:39,741 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201903
2019-04-06 19:51:39,743 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyymm-201903
2019-04-06 19:51:39,744 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,745 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,746 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:51:39,747 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:51:39,747 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyy_mm_dd-20190401-20190407
2019-04-06 19:51:39,748 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,749 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyymmdd', 'value']
2019-04-06 19:51:39,749 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:51:39,750 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:51:39,751 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyymmdd-20190331
2019-04-06 19:51:39,752 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,753 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyymmdd', 'value']
2019-04-06 19:51:39,754 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:51:39,754 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:51:39,755 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:51:39,756 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,756 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curtime', 'value']
2019-04-06 19:51:39,757 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554551499000
2019-04-06 19:51:39,758 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554551499000
2019-04-06 19:51:39,758 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curtime-1554551499000
2019-04-06 19:51:39,759 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,760 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyymmdd', 'value']
2019-04-06 19:51:39,761 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:51:39,763 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:51:39,764 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyymmdd-20190401
2019-04-06 19:51:39,764 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,765 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,766 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-30-2019-04-05
2019-04-06 19:51:39,767 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-30-2019-04-05
2019-04-06 19:51:39,768 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyy_mm_dd-2019-03-30-2019-04-05
2019-04-06 19:51:39,769 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,770 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyymmdd', 'value']
2019-04-06 19:51:39,771 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:51:39,771 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:51:39,772 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:51:39,772 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,773 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyy_mm', 'value']
2019-04-06 19:51:39,775 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04
2019-04-06 19:51:39,776 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04
2019-04-06 19:51:39,777 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyy_mm-2019-04
2019-04-06 19:51:39,778 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,779 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,779 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:51:39,780 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:51:39,781 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyy_mm_dd-2019-03-31
2019-04-06 19:51:39,782 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,782 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,783 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-30
2019-04-06 19:51:39,784 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-30
2019-04-06 19:51:39,784 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyy_mm_dd-2019-04-30
2019-04-06 19:51:39,785 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,786 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyymmdd', 'value']
2019-04-06 19:51:39,787 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:51:39,787 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:51:39,788 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyymmdd-20190331
2019-04-06 19:51:39,789 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,790 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyymm', 'value']
2019-04-06 19:51:39,791 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:51:39,792 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:51:39,793 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyymm-2018-04
2019-04-06 19:51:39,794 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,795 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:51:39,796 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325-20190331
2019-04-06 19:51:39,796 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325-20190331
2019-04-06 19:51:39,797 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyymmdd-20190325-20190331
2019-04-06 19:51:39,798 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,799 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyymmdd', 'value']
2019-04-06 19:51:39,800 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190324
2019-04-06 19:51:39,801 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190324
2019-04-06 19:51:39,801 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyymmdd-20190324
2019-04-06 19:51:39,802 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,803 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyy_mm', 'value']
2019-04-06 19:51:39,804 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:51:39,804 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:51:39,805 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyy_mm-2018-04
2019-04-06 19:51:39,805 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,807 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,808 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:51:39,810 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:51:39,810 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyy_mm_dd-20190401
2019-04-06 19:51:39,811 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,812 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_yesterday', 'value']
2019-04-06 19:51:39,813 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554393600000
2019-04-06 19:51:39,813 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554393600000
2019-04-06 19:51:39,814 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_yesterday-1554393600000
2019-04-06 19:51:39,814 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,815 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,816 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25
2019-04-06 19:51:39,817 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25
2019-04-06 19:51:39,818 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyy_mm_dd-2019-03-25
2019-04-06 19:51:39,818 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,819 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyy_mm', 'value']
2019-04-06 19:51:39,820 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03
2019-04-06 19:51:39,820 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03
2019-04-06 19:51:39,821 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyy_mm-2019-03
2019-04-06 19:51:39,821 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,822 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime', 'value']
2019-04-06 19:51:39,823 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:51:39
2019-04-06 19:51:39,824 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:51:39
2019-04-06 19:51:39,825 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime-2019-04-06 19:51:39
2019-04-06 19:51:39,826 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,826 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,827 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25-2019-03-31
2019-04-06 19:51:39,828 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25-2019-03-31
2019-04-06 19:51:39,828 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyy_mm_dd-2019-03-25-2019-03-31
2019-04-06 19:51:39,829 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,830 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyymmdd', 'value']
2019-04-06 19:51:39,831 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190405
2019-04-06 19:51:39,831 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190405
2019-04-06 19:51:39,832 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyymmdd-20190405
2019-04-06 19:51:39,833 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,834 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyymmdd', 'value']
2019-04-06 19:51:39,834 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-07-2019-04-05
2019-04-06 19:51:39,835 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-07-2019-04-05
2019-04-06 19:51:39,836 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyymmdd-2019-03-07-2019-04-05
2019-04-06 19:51:39,837 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,838 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,839 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:51:39,839 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:51:39,840 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyy_mm_dd-20190407
2019-04-06 19:51:39,841 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,841 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyymm', 'value']
2019-04-06 19:51:39,842 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201812
2019-04-06 19:51:39,843 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201812
2019-04-06 19:51:39,844 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyymm-201812
2019-04-06 19:51:39,844 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,845 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyymmdd', 'value']
2019-04-06 19:51:39,846 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325
2019-04-06 19:51:39,846 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325
2019-04-06 19:51:39,847 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyymmdd-20190325
2019-04-06 19:51:39,848 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,849 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyymmdd', 'value']
2019-04-06 19:51:39,851 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190318
2019-04-06 19:51:39,852 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190318
2019-04-06 19:51:39,854 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyymmdd-20190318
2019-04-06 19:51:39,855 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,857 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyymmdd', 'value']
2019-04-06 19:51:39,858 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190406
2019-04-06 19:51:39,859 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190406
2019-04-06 19:51:39,861 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyymmdd-20190406
2019-04-06 19:51:39,862 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,863 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,864 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-05-01
2019-04-06 19:51:39,865 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-05-01
2019-04-06 19:51:39,866 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyy_mm_dd-2019-05-01
2019-04-06 19:51:39,866 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,867 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyymmdd', 'value']
2019-04-06 19:51:39,869 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:51:39,870 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:51:39,871 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyymmdd-20190407
2019-04-06 19:51:39,872 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,873 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime_puls10s', 'value']
2019-04-06 19:51:39,874 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:51:49
2019-04-06 19:51:39,876 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:51:49
2019-04-06 19:51:39,877 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime_puls10s-2019-04-06 19:51:49
2019-04-06 19:51:39,879 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:51:39,880 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:51:39,882 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:51:39,883 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:51:39,884 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:51:39,886 APIUnittestTestCase.py[line: 176] INFO: 正在执行断言
2019-04-06 19:51:39,887 unittesttestcase.py[line: 35] INFO: 正在替换“校验模式”中的动态参数
2019-04-06 19:51:39,889 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:51:39,890 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'yesterday_yyyy_mm_dd': '2019-04-05', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'december_month_last_year_yyyy_mm': '2018-12', 'current_month_yyyymm': '201904', 'current_week_num_yyyy_mm': '2019-14', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday7_yyyymmdd': '20190407', 'millisecond_for_curdate': 1554480000000, 'last_weekday1_yyyymmdd': '20190325', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_week_num_yyyyno': '201913', 'december_month_last_year_yyyymm': '201812', 'today_yyyy_mm_dd': '2019-04-06', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyymm': '201903', 'last_weekday7_yyyymmdd': '20190331', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'millisecond_for_curtime': 1554551499000, 'weekday1_yyyymmdd': '20190401', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curmonth_range_yyyymmdd': '20190401-20190430', 'current_month_yyyy_mm': '2019-04', 'millisecond_for_yesterday': 1554393600000, 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'pre_weekday7_yyyymmdd': '20190324', 'current_month_last_year_yyyy_mm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_yyyy_mm': '2019-03', 'curtime': '2019-04-06 19:51:39', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_first_day_yyyymmdd': '20190301', 'curmonth_final_day_yyyymmdd': '20190430', 'curtime_puls10s': '2019-04-06 19:51:49', 'today_yyyymmdd': '20190406', 'last_month_final_day_yyyymmdd': '20190331', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_first_day_yyyymmdd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30'}
2019-04-06 19:51:39,892 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：[
  {
    "模式": "curtime",
    "消息": "fail#请求失败"
  }
]
2019-04-06 19:51:39,893 unittesttestcase.py[line: 38] INFO: 正在替换“校验模式”中的插件函数
2019-04-06 19:51:39,895 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:51:39,896 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:51:39,897 unittesttestcase.py[line: 82] INFO: 校验规则为：“包含字符串：curtime”
2019-04-06 19:51:39,901 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID4-N_获取时间和日期, ID:4]======================
2019-04-06 19:51:39,903 test_case.py[line: 32] INFO: 正在查询测试用例[ID：4, 名称：ID4-N_获取时间和日期]关联的测试步骤
2019-04-06 19:51:39,904 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(4,)
2019-04-06 19:51:39,913 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:51:39,913 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 2,  用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:51:39,914 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:51:39,915 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:51:39,916 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:51:39,917 test_case_step.py[line: 203] INFO: 正在替换“输入参数”中的动态参数
2019-04-06 19:51:39,919 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:51:39,920 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'yesterday_yyyy_mm_dd': '2019-04-05', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'december_month_last_year_yyyy_mm': '2018-12', 'current_month_yyyymm': '201904', 'current_week_num_yyyy_mm': '2019-14', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday7_yyyymmdd': '20190407', 'millisecond_for_curdate': 1554480000000, 'last_weekday1_yyyymmdd': '20190325', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_week_num_yyyyno': '201913', 'december_month_last_year_yyyymm': '201812', 'today_yyyy_mm_dd': '2019-04-06', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyymm': '201903', 'last_weekday7_yyyymmdd': '20190331', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'millisecond_for_curtime': 1554551499000, 'weekday1_yyyymmdd': '20190401', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curmonth_range_yyyymmdd': '20190401-20190430', 'current_month_yyyy_mm': '2019-04', 'millisecond_for_yesterday': 1554393600000, 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'pre_weekday7_yyyymmdd': '20190324', 'current_month_last_year_yyyy_mm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_yyyy_mm': '2019-03', 'curtime': '2019-04-06 19:51:39', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_first_day_yyyymmdd': '20190301', 'curmonth_final_day_yyyymmdd': '20190430', 'curtime_puls10s': '2019-04-06 19:51:49', 'today_yyyymmdd': '20190406', 'last_month_final_day_yyyymmdd': '20190331', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_first_day_yyyymmdd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30'}
2019-04-06 19:51:39,922 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：${__read_file("emailPic.png", "rb")}
2019-04-06 19:51:39,923 test_case_step.py[line: 206] INFO: 正在替换“输入参数”中的插件函数
2019-04-06 19:51:39,924 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:['${__read_file("emailPic.png", "rb")}']
2019-04-06 19:51:39,926 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:51:39,927 test_case_step.py[line: 141] INFO: 正在替换插件函数：${__read_file("emailPic.png", "rb")}
2019-04-06 19:51:39,935 pluginfunc.py[line: 31] INFO: 待读取的文件路径为：D:\interface_project_for_dev\testdata\emailPic.png
2019-04-06 19:51:39,936 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:51:39,937 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:51:39,937 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'yesterday_yyyy_mm_dd': '2019-04-05', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'december_month_last_year_yyyy_mm': '2018-12', 'current_month_yyyymm': '201904', 'current_week_num_yyyy_mm': '2019-14', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday7_yyyymmdd': '20190407', 'millisecond_for_curdate': 1554480000000, 'last_weekday1_yyyymmdd': '20190325', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_week_num_yyyyno': '201913', 'december_month_last_year_yyyymm': '201812', 'today_yyyy_mm_dd': '2019-04-06', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyymm': '201903', 'last_weekday7_yyyymmdd': '20190331', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'millisecond_for_curtime': 1554551499000, 'weekday1_yyyymmdd': '20190401', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curmonth_range_yyyymmdd': '20190401-20190430', 'current_month_yyyy_mm': '2019-04', 'millisecond_for_yesterday': 1554393600000, 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'pre_weekday7_yyyymmdd': '20190324', 'current_month_last_year_yyyy_mm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_yyyy_mm': '2019-03', 'curtime': '2019-04-06 19:51:39', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_first_day_yyyymmdd': '20190301', 'curmonth_final_day_yyyymmdd': '20190430', 'curtime_puls10s': '2019-04-06 19:51:49', 'today_yyyymmdd': '20190406', 'last_month_final_day_yyyymmdd': '20190331', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_first_day_yyyymmdd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30'}
2019-04-06 19:51:39,938 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:51:39,939 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:51:39,940 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:51:39,940 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:51:39,941 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:51:39,942 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:51:39,942 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'yesterday_yyyy_mm_dd': '2019-04-05', 'next_month_first_day_yyyymmdd': '20190501', 'curmonth_first_day_yyyy_mm_dd': '2019-04-01', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'december_month_last_year_yyyy_mm': '2018-12', 'current_month_yyyymm': '201904', 'current_week_num_yyyy_mm': '2019-14', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'weekday7_yyyymmdd': '20190407', 'millisecond_for_curdate': 1554480000000, 'last_weekday1_yyyymmdd': '20190325', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_week_num_yyyyno': '201913', 'december_month_last_year_yyyymm': '201812', 'today_yyyy_mm_dd': '2019-04-06', 'current_week_num_yyyymm': '201914', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'last_month_yyyymm': '201903', 'last_weekday7_yyyymmdd': '20190331', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'millisecond_for_curtime': 1554551499000, 'weekday1_yyyymmdd': '20190401', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curmonth_range_yyyymmdd': '20190401-20190430', 'current_month_yyyy_mm': '2019-04', 'millisecond_for_yesterday': 1554393600000, 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday1_yyyymmdd': '20190318', 'current_month_last_year_yyyymm': '2018-04', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'pre_weekday7_yyyymmdd': '20190324', 'current_month_last_year_yyyy_mm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'last_month_yyyy_mm': '2019-03', 'curtime': '2019-04-06 19:51:39', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'yesterday_yyyymmdd': '20190405', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'weekday7_yyyy_mm_dd': '20190407', 'last_month_first_day_yyyymmdd': '20190301', 'curmonth_final_day_yyyymmdd': '20190430', 'curtime_puls10s': '2019-04-06 19:51:49', 'today_yyyymmdd': '20190406', 'last_month_final_day_yyyymmdd': '20190331', 'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'curmonth_first_day_yyyymmdd': '20190401', 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30'}
2019-04-06 19:51:39,943 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:51:39,944 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:51:39,945 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:51:39,946 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:51:39,948 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:51:42,953 test_case.py[line: 104] ERROR: 执行用例测试步骤失败，正在进行第 1 次重试（第 1 步, 步骤ID: 2, 用例ID：4, 用例名称：ID4-N_获取时间和日期）
2019-04-06 19:51:42,955 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:51:42,957 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:51:42,958 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:51:42,962 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:51:42,971 test_case.py[line: 112] ERROR: 执行用例测试步骤运行失败（第 1 步, 步骤ID: 2， 用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:51:42,972 running_plan.py[line: 107] INFO: 正在释放资源
2019-04-06 19:51:42,975 running_plan.py[line: 108] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:51:42,977 running_plan.py[line: 114] INFO: 正在清理与项目关联的全局变量
2019-04-06 19:51:42,980 main.py[line: 48] INFO: 执行失败，正在更新数据库运行计划的运行状态
2019-04-06 19:51:54,678 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:51:54,679 main.py[line: 19] INFO: 当前运行模式为：rop
2019-04-06 19:51:54,680 main.py[line: 22] INFO: 当前运行计划编号为：1554493626460440
2019-04-06 19:52:54,164 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:52:54,165 main.py[line: 19] INFO: 当前运行模式为：rop
2019-04-06 19:52:54,166 main.py[line: 22] INFO: 当前运行计划编号为：1554493626460440
2019-04-06 19:53:01,289 main.py[line: 16] INFO: 执行当前脚本的Python版本：3.5.4
2019-04-06 19:53:01,290 main.py[line: 19] INFO: 当前运行模式为：rop
2019-04-06 19:53:01,290 main.py[line: 22] INFO: 当前运行计划编号为：1554493626460440
2019-04-06 19:53:01,291 main.py[line: 32] INFO: 运行单项目,待执行的运行计划编码：1554493626460440
2019-04-06 19:53:01,292 main.py[line: 33] INFO: 正在查询运行计划相关信息
2019-04-06 19:53:01,292 mydb.py[line: 122] INFO: query：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =%s  data：('1554493626460440',)
2019-04-06 19:53:01,293 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT running_plan_name,project_id, project_name, plan_name, plan_id, valid_flag FROM `website_running_plan` WHERE running_plan_num =1554493626460440
2019-04-06 19:53:01,298 main.py[line: 40] INFO: 待运行项目：名称：DEMO项目，ID：1，关联的测试计划有：demo测试计划
2019-04-06 19:53:01,298 main.py[line: 43] INFO: ======================开始执行运行计划[名称：demo运行计划]======================
2019-04-06 19:53:01,299 running_plan.py[line: 31] INFO: 正在查询项目[ID：1,名称：DEMO项目]相关信息
2019-04-06 19:53:01,300 mydb.py[line: 122] INFO: query：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = %s  data：(1,)
2019-04-06 19:53:01,300 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT protocol, host, port, environment_id, valid_flag FROM `website_api_project_setting` WHERE id = 1
2019-04-06 19:53:01,305 running_plan.py[line: 37] INFO: 正在查询与项目关联的数据库信息
2019-04-06 19:53:01,306 mydb.py[line: 152] INFO: query：SELECT db_type, db_alias, db_name, db_host, db_port, db_user, db_passwd FROM `website_database_setting` WHERE locate('API1', project_id) != 0 AND environment_id= '1'  data：
2019-04-06 19:53:01,309 running_plan.py[line: 58] INFO: 正在查询与项目关联的全局变量
2019-04-06 19:53:01,310 mydb.py[line: 152] INFO: query：SELECT `name`, `value` FROM `website_global_variable_setting` WHERE  project_type='API项目' AND locate('%s', project_id) != 0 AND locate('%s', env_id) != 0   data：(1, 1)
2019-04-06 19:53:01,314 running_plan.py[line: 84] INFO: ======================开始运行测试项目[名称：DEMO项目, ID：1]======================
2019-04-06 19:53:01,315 test_project.py[line: 102] INFO: ======================正在同步更新与待运行测试计划关联的所有用例树节点信息======================
2019-04-06 19:53:01,315 test_project.py[line: 39] INFO: 待运行计划ID列表：['1']
2019-04-06 19:53:01,316 test_project.py[line: 41] INFO: 正在查询与测试计划关联的用例树节点
2019-04-06 19:53:01,317 mydb.py[line: 152] INFO: query：SELECT node_id FROM `website_api_case_tree_test_plan` WHERE plan_id IN (1) GROUP BY node_id  data：
2019-04-06 19:53:01,320 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:53:01,320 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(1,)
2019-04-06 19:53:01,322 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 1
2019-04-06 19:53:01,325 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:53:01,326 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:53:01,329 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:53:01,329 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='', sub_node_num=2 WHERE plan_id IN (1) AND node_id = 1
2019-04-06 19:53:01,416 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:53:01,419 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(2,)
2019-04-06 19:53:01,422 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 2
2019-04-06 19:53:01,437 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:53:01,438 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:53:01,443 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:53:01,444 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:53:01,449 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:53:01,451 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 2
2019-04-06 19:53:01,474 test_project.py[line: 55] INFO: 正在查找用例树节点信息
2019-04-06 19:53:01,475 mydb.py[line: 122] INFO: query：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = %s  data：(4,)
2019-04-06 19:53:01,475 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT t1.text, t1.parent_id, COUNT(t2.id) FROM `website_api_case_tree` AS t1 LEFT JOIN `website_api_case_tree` AS t2 ON t2.parent_id = t1.id WHERE t1.id = 4
2019-04-06 19:53:01,479 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(1,)
2019-04-06 19:53:01,480 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 1
2019-04-06 19:53:01,483 mydb.py[line: 122] INFO: query：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = %s  data：(0,)
2019-04-06 19:53:01,484 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT parent_id, text FROM `website_api_case_tree` WHERE id = 0
2019-04-06 19:53:01,492 test_project.py[line: 67] INFO: 正在更新测试计划用例树节点关联表记录
2019-04-06 19:53:01,493 mydb.py[line: 82] INFO: update_query：UPDATE website_api_case_tree_test_plan SET node_path='DEMO项目', sub_node_num=0 WHERE plan_id IN (1) AND node_id = 4
2019-04-06 19:53:01,529 test_project.py[line: 108] INFO: 同步更新与待运行测试计划关联的所有用例树节点信息成功
2019-04-06 19:53:01,530 test_project.py[line: 111] INFO: 正在查询测试计划[ID：1]相关信息
2019-04-06 19:53:01,530 mydb.py[line: 122] INFO: query：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = %s  data：('1',)
2019-04-06 19:53:01,532 mydb.py[line: 125] INFO: 执行的查询语句为：SELECT plan_name,valid_flag FROM `website_api_test_plan` WHERE id = 1
2019-04-06 19:53:01,536 test_project.py[line: 116] INFO: ======================开始运行测试计划[名称：demo测试计划, ID：1]======================
2019-04-06 19:53:01,537 test_plan.py[line: 30] INFO: 正在查询测试计划关联的测试用例
2019-04-06 19:53:01,538 mydb.py[line: 152] INFO: query：SELECT node_id, node_path, node_name FROM `website_api_case_tree_test_plan` WHERE plan_id = %s AND sub_node_num = 0 ORDER BY `order` ASC  data：('1',)
2019-04-06 19:53:01,541 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID2-N_获取时间和日期, ID:2]======================
2019-04-06 19:53:01,542 test_case.py[line: 32] INFO: 正在查询测试用例[ID：2, 名称：ID2-N_获取时间和日期]关联的测试步骤
2019-04-06 19:53:01,543 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(2,)
2019-04-06 19:53:01,549 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:53:01,550 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 1,  用例ID：2, 用例名称：ID2-N_获取时间和日期）======================
2019-04-06 19:53:01,551 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:53:01,551 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:53:01,552 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:53:01,553 test_case_step.py[line: 169] INFO: 正在替换“请求头”中的动态参数
2019-04-06 19:53:01,554 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:53:01,555 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:53:01,556 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：{
  "fdafa": 13000
}
2019-04-06 19:53:01,557 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:53:01,557 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:53:01,558 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:53:01,558 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:53:01,559 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:53:01,561 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:53:01,562 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:53:01,562 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:53:01,563 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:53:01,564 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{}
2019-04-06 19:53:01,565 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:53:01,565 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:53:01,566 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:53:01,567 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:53:01,569 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:53:01,569 httpprotocol.py[line: 96] INFO: 发起的请求为：GET http://192.168.0.103:8000/action/getDateAndTime
2019-04-06 19:53:01,570 httpprotocol.py[line: 97] INFO: 请求头为：OrderedDict([('fdafa', 13000)])
2019-04-06 19:53:01,992 APIUnittestTestCase.py[line: 147] INFO: 正在对服务器返回body进行解码
2019-04-06 19:53:01,995 APIUnittestTestCase.py[line: 166] INFO: 服务器返回结果"响应体(body)": {"curmonth_range_yyyymmdd": "20190401-20190430", "last_weekday7_yyyy_mm_dd": "2019-03-31", "last_weekday1_yyyy_mm_dd": "2019-03-25", "lastmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "weekday1_yyyymmdd": "20190401", "current_month_yyyy_mm": "2019-04", "today_yyyy_mm_dd": "2019-04-06", "recent_30day_range_yyyy_mm_dd": "20190307-20190405", "next_month_first_day_yyyy_mm_dd": "2019-05-01", "current_month_last_year_yyyy_mm": "2018-04", "last_week_num_yyyyno": "201913", "weekday7_yyyymmdd": "20190407", "weekday1_to_weekday7_yyyymmdd": "20190401-20190407", "current_month_last_year_yyyymm": "2018-04", "last_weekday1_to_weekday7_yyyymmdd": "20190325-20190331", "weekday1_yyyy_mm_dd": "20190401", "curtime": "2019-04-06 19:53:01", "today_yyyymmdd": "20190406", "curmonth_first_day_yyyy_mm_dd": "2019-04-01", "pre_weekday7_yyyymmdd": "20190324", "last_weekday1_yyyymmdd": "20190325", "recent_7day_range_yyyymmdd": "20190330-20190405", "last_month_yyyymm": "201903", "millisecond_for_curdate": 1554480000000, "december_month_last_year_yyyymm": "201812", "pre_weekday1_yyyymmdd": "20190318", "weekday7_yyyy_mm_dd": "20190407", "current_week_num_yyyymm": "201914", "next_month_first_day_yyyymmdd": "20190501", "curtime_puls10s": "2019-04-06 19:53:11", "yesterday_yyyy_mm_dd": "2019-04-05", "december_month_last_year_yyyy_mm": "2018-12", "yesterday_yyyymmdd": "20190405", "curmonth_final_day_yyyymmdd": "20190430", "lastmonth_range_yyyymmdd": "20190401-20190430", "last_weekday1_to_weekday7_yyyy_mm_dd": "2019-03-25-2019-03-31", "pre_weekday1_yyyy_mm_dd": "2019-03-18", "last_month_yyyy_mm": "2019-03", "last_month_final_day_yyyy_mm_dd": "2019-03-31", "weekday1_to_weekday7_yyyy_mm_dd": "20190401-20190407", "current_month_yyyymm": "201904", "millisecond_for_yesterday": 1554393600000, "recent_30day_range_yyyymmdd": "2019-03-07-2019-04-05", "curmonth_final_day_yyyy_mm_dd": "2019-04-30", "last_month_first_day_yyyymmdd": "20190301", "recent_7day_range_yyyy_mm_dd": "2019-03-30-2019-04-05", "current_week_num_yyyy_mm": "2019-14", "last_month_first_day_yyyy_mm_dd": "2019-03-01", "last_month_final_day_yyyymmdd": "20190331", "curmonth_range_yyyy_mm_dd": "2019-04-01-2019-04-30", "millisecond_for_curtime": 1554551581000, "last_weekday7_yyyymmdd": "20190331", "pre_weekday7_yyyy_mm_dd": "2019-03-24", "curmonth_first_day_yyyymmdd": "20190401"}
2019-04-06 19:53:01,996 APIUnittestTestCase.py[line: 167] INFO: 服务器返回结果"请求头(headers)": [('Content-Length', '2339'), ('Content-Type', 'text/html; charset=utf-8'), ('Connection', 'close'), ('X-Frame-Options', 'SAMEORIGIN')]
2019-04-06 19:53:01,996 APIUnittestTestCase.py[line: 168] INFO: 服务器返回结果"状态码(code)": 200
2019-04-06 19:53:01,997 APIUnittestTestCase.py[line: 173] INFO: 正在提取目标返回结果值
2019-04-06 19:53:01,998 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:01,999 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,000 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:53:02,000 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:53:02,001 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyy_mm_dd-20190401-20190407
2019-04-06 19:53:02,002 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,002 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curtime', 'value']
2019-04-06 19:53:02,003 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554551581000
2019-04-06 19:53:02,004 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554551581000
2019-04-06 19:53:02,005 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curtime-1554551581000
2019-04-06 19:53:02,006 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,006 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,007 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:53:02,008 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:53:02,008 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:53:02,009 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,010 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyymmdd', 'value']
2019-04-06 19:53:02,010 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190501
2019-04-06 19:53:02,011 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190501
2019-04-06 19:53:02,012 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyymmdd-20190501
2019-04-06 19:53:02,012 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,013 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyymm', 'value']
2019-04-06 19:53:02,014 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201812
2019-04-06 19:53:02,015 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201812
2019-04-06 19:53:02,015 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyymm-201812
2019-04-06 19:53:02,016 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,017 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,017 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:53:02,018 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:53:02,019 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyy_mm_dd-20190407
2019-04-06 19:53:02,019 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,020 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyymmdd', 'value']
2019-04-06 19:53:02,021 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:53:02,021 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:53:02,022 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyymmdd-20190401
2019-04-06 19:53:02,023 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,025 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyymmdd', 'value']
2019-04-06 19:53:02,026 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190405
2019-04-06 19:53:02,026 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190405
2019-04-06 19:53:02,027 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyymmdd-20190405
2019-04-06 19:53:02,028 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,029 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,029 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-01
2019-04-06 19:53:02,030 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-01
2019-04-06 19:53:02,031 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyy_mm_dd-2019-03-01
2019-04-06 19:53:02,031 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,033 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,033 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-30
2019-04-06 19:53:02,034 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-30
2019-04-06 19:53:02,036 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyy_mm_dd-2019-04-30
2019-04-06 19:53:02,037 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,038 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,039 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-24
2019-04-06 19:53:02,040 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-24
2019-04-06 19:53:02,041 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyy_mm_dd-2019-03-24
2019-04-06 19:53:02,042 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,042 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,044 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25-2019-03-31
2019-04-06 19:53:02,045 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25-2019-03-31
2019-04-06 19:53:02,045 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyy_mm_dd-2019-03-25-2019-03-31
2019-04-06 19:53:02,047 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,047 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyymm', 'value']
2019-04-06 19:53:02,048 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201903
2019-04-06 19:53:02,049 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201903
2019-04-06 19:53:02,050 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyymm-201903
2019-04-06 19:53:02,051 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,052 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyymmdd', 'value']
2019-04-06 19:53:02,053 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:53:02,054 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:53:02,054 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyymmdd-20190331
2019-04-06 19:53:02,055 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,056 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyymmdd', 'value']
2019-04-06 19:53:02,056 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:53:02,057 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:53:02,058 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyymmdd-20190401
2019-04-06 19:53:02,058 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,059 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,060 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-18
2019-04-06 19:53:02,060 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-18
2019-04-06 19:53:02,061 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyy_mm_dd-2019-03-18
2019-04-06 19:53:02,062 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,062 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyymmdd', 'value']
2019-04-06 19:53:02,063 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325
2019-04-06 19:53:02,064 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325
2019-04-06 19:53:02,065 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyymmdd-20190325
2019-04-06 19:53:02,066 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,067 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['yesterday_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,067 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-05
2019-04-06 19:53:02,068 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-05
2019-04-06 19:53:02,069 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:yesterday_yyyy_mm_dd-2019-04-05
2019-04-06 19:53:02,070 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,070 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,071 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401
2019-04-06 19:53:02,072 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401
2019-04-06 19:53:02,072 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_yyyy_mm_dd-20190401
2019-04-06 19:53:02,073 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,074 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyymmdd', 'value']
2019-04-06 19:53:02,074 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:53:02,075 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:53:02,076 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:53:02,076 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,077 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,078 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-30-2019-04-05
2019-04-06 19:53:02,078 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-30-2019-04-05
2019-04-06 19:53:02,079 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyy_mm_dd-2019-03-30-2019-04-05
2019-04-06 19:53:02,080 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,080 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime_puls10s', 'value']
2019-04-06 19:53:02,081 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:53:11
2019-04-06 19:53:02,082 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:53:11
2019-04-06 19:53:02,083 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime_puls10s-2019-04-06 19:53:11
2019-04-06 19:53:02,084 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,085 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday7_yyyymmdd', 'value']
2019-04-06 19:53:02,086 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190407
2019-04-06 19:53:02,086 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190407
2019-04-06 19:53:02,087 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday7_yyyymmdd-20190407
2019-04-06 19:53:02,087 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,088 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyymmdd', 'value']
2019-04-06 19:53:02,089 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190406
2019-04-06 19:53:02,090 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190406
2019-04-06 19:53:02,090 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyymmdd-20190406
2019-04-06 19:53:02,091 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,092 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyy_mm', 'value']
2019-04-06 19:53:02,092 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-14
2019-04-06 19:53:02,093 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-14
2019-04-06 19:53:02,094 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyy_mm-2019-14
2019-04-06 19:53:02,094 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,095 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_range_yyyymmdd', 'value']
2019-04-06 19:53:02,096 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190430
2019-04-06 19:53:02,096 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190430
2019-04-06 19:53:02,097 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_range_yyyymmdd-20190401-20190430
2019-04-06 19:53:02,098 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,099 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:53:02,099 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190325-20190331
2019-04-06 19:53:02,101 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190325-20190331
2019-04-06 19:53:02,102 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_to_weekday7_yyyymmdd-20190325-20190331
2019-04-06 19:53:02,102 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,103 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['today_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,104 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06
2019-04-06 19:53:02,104 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06
2019-04-06 19:53:02,105 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:today_yyyy_mm_dd-2019-04-06
2019-04-06 19:53:02,106 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,107 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curtime', 'value']
2019-04-06 19:53:02,107 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-06 19:53:01
2019-04-06 19:53:02,108 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-06 19:53:01
2019-04-06 19:53:02,109 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curtime-2019-04-06 19:53:01
2019-04-06 19:53:02,109 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,110 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_week_num_yyyymm', 'value']
2019-04-06 19:53:02,111 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201914
2019-04-06 19:53:02,112 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201914
2019-04-06 19:53:02,113 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_week_num_yyyymm-201914
2019-04-06 19:53:02,113 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,114 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_7day_range_yyyymmdd', 'value']
2019-04-06 19:53:02,115 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190330-20190405
2019-04-06 19:53:02,115 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190330-20190405
2019-04-06 19:53:02,116 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_7day_range_yyyymmdd-20190330-20190405
2019-04-06 19:53:02,117 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,117 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['weekday1_to_weekday7_yyyymmdd', 'value']
2019-04-06 19:53:02,118 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190401-20190407
2019-04-06 19:53:02,119 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190401-20190407
2019-04-06 19:53:02,120 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:weekday1_to_weekday7_yyyymmdd-20190401-20190407
2019-04-06 19:53:02,120 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,121 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_first_day_yyyymmdd', 'value']
2019-04-06 19:53:02,122 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190301
2019-04-06 19:53:02,122 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190301
2019-04-06 19:53:02,123 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_first_day_yyyymmdd-20190301
2019-04-06 19:53:02,124 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,124 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyymm', 'value']
2019-04-06 19:53:02,125 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201904
2019-04-06 19:53:02,126 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201904
2019-04-06 19:53:02,126 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyymm-201904
2019-04-06 19:53:02,127 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,128 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['december_month_last_year_yyyy_mm', 'value']
2019-04-06 19:53:02,129 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-12
2019-04-06 19:53:02,129 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-12
2019-04-06 19:53:02,130 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:december_month_last_year_yyyy_mm-2018-12
2019-04-06 19:53:02,131 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,131 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['lastmonth_range_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,132 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01-2019-04-30
2019-04-06 19:53:02,133 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01-2019-04-30
2019-04-06 19:53:02,134 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:lastmonth_range_yyyy_mm_dd-2019-04-01-2019-04-30
2019-04-06 19:53:02,134 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,135 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_week_num_yyyyno', 'value']
2019-04-06 19:53:02,136 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：201913
2019-04-06 19:53:02,136 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：201913
2019-04-06 19:53:02,137 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_week_num_yyyyno-201913
2019-04-06 19:53:02,138 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,138 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday1_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,139 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-25
2019-04-06 19:53:02,140 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-25
2019-04-06 19:53:02,140 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday1_yyyy_mm_dd-2019-03-25
2019-04-06 19:53:02,141 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,142 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday7_yyyymmdd', 'value']
2019-04-06 19:53:02,142 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190324
2019-04-06 19:53:02,143 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190324
2019-04-06 19:53:02,144 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday7_yyyymmdd-20190324
2019-04-06 19:53:02,144 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,145 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['pre_weekday1_yyyymmdd', 'value']
2019-04-06 19:53:02,146 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190318
2019-04-06 19:53:02,147 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190318
2019-04-06 19:53:02,147 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:pre_weekday1_yyyymmdd-20190318
2019-04-06 19:53:02,148 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,149 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_final_day_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,150 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:53:02,150 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:53:02,151 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_final_day_yyyy_mm_dd-2019-03-31
2019-04-06 19:53:02,152 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,152 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['next_month_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,153 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-05-01
2019-04-06 19:53:02,154 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-05-01
2019-04-06 19:53:02,154 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:next_month_first_day_yyyy_mm_dd-2019-05-01
2019-04-06 19:53:02,155 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,156 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,156 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190307-20190405
2019-04-06 19:53:02,157 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190307-20190405
2019-04-06 19:53:02,158 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyy_mm_dd-20190307-20190405
2019-04-06 19:53:02,158 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,160 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_yyyy_mm', 'value']
2019-04-06 19:53:02,160 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04
2019-04-06 19:53:02,161 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04
2019-04-06 19:53:02,162 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_yyyy_mm-2019-04
2019-04-06 19:53:02,162 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,163 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyymmdd', 'value']
2019-04-06 19:53:02,164 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190331
2019-04-06 19:53:02,165 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190331
2019-04-06 19:53:02,165 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyymmdd-20190331
2019-04-06 19:53:02,166 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,167 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_yesterday', 'value']
2019-04-06 19:53:02,167 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554393600000
2019-04-06 19:53:02,168 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554393600000
2019-04-06 19:53:02,169 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_yesterday-1554393600000
2019-04-06 19:53:02,169 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,170 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_weekday7_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,171 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-31
2019-04-06 19:53:02,172 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-31
2019-04-06 19:53:02,173 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_weekday7_yyyy_mm_dd-2019-03-31
2019-04-06 19:53:02,173 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,174 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['last_month_yyyy_mm', 'value']
2019-04-06 19:53:02,175 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03
2019-04-06 19:53:02,176 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03
2019-04-06 19:53:02,176 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:last_month_yyyy_mm-2019-03
2019-04-06 19:53:02,177 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,178 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyy_mm', 'value']
2019-04-06 19:53:02,178 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:53:02,179 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:53:02,180 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyy_mm-2018-04
2019-04-06 19:53:02,180 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,181 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['recent_30day_range_yyyymmdd', 'value']
2019-04-06 19:53:02,182 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-03-07-2019-04-05
2019-04-06 19:53:02,183 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-03-07-2019-04-05
2019-04-06 19:53:02,183 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:recent_30day_range_yyyymmdd-2019-03-07-2019-04-05
2019-04-06 19:53:02,184 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,185 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['current_month_last_year_yyyymm', 'value']
2019-04-06 19:53:02,185 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2018-04
2019-04-06 19:53:02,186 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2018-04
2019-04-06 19:53:02,187 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:current_month_last_year_yyyymm-2018-04
2019-04-06 19:53:02,187 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,188 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_final_day_yyyymmdd', 'value']
2019-04-06 19:53:02,189 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：20190430
2019-04-06 19:53:02,191 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：20190430
2019-04-06 19:53:02,192 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_final_day_yyyymmdd-20190430
2019-04-06 19:53:02,194 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,195 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['millisecond_for_curdate', 'value']
2019-04-06 19:53:02,197 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：1554480000000
2019-04-06 19:53:02,198 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：1554480000000
2019-04-06 19:53:02,200 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:millisecond_for_curdate-1554480000000
2019-04-06 19:53:02,201 unittesttestcase.py[line: 383] INFO: 使用键值提取
2019-04-06 19:53:02,203 unittesttestcase.py[line: 299] INFO: 要提取的字典key,value层级为：['curmonth_first_day_yyyy_mm_dd', 'value']
2019-04-06 19:53:02,205 unittesttestcase.py[line: 313] INFO: 找到的对应字典层级key的值为：2019-04-01
2019-04-06 19:53:02,207 unittesttestcase.py[line: 385] INFO: 获取到的变量的值为：2019-04-01
2019-04-06 19:53:02,208 unittesttestcase.py[line: 388] INFO: 使用“键值提取”提取的自定义变量-值(key-value对)为:curmonth_first_day_yyyy_mm_dd-2019-04-01
2019-04-06 19:53:02,209 APIUnittestTestCase.py[line: 176] INFO: 正在执行断言
2019-04-06 19:53:02,211 unittesttestcase.py[line: 35] INFO: 正在替换“校验模式”中的动态参数
2019-04-06 19:53:02,212 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:53:02,213 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'millisecond_for_curtime': 1554551581000, 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'next_month_first_day_yyyymmdd': '20190501', 'december_month_last_year_yyyymm': '201812', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'yesterday_yyyymmdd': '20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_month_yyyy_mm': '2019-03', 'last_month_yyyymm': '201903', 'last_month_final_day_yyyymmdd': '20190331', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'current_month_last_year_yyyymm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'curtime': '2019-04-06 19:53:01', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curtime_puls10s': '2019-04-06 19:53:11', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'today_yyyymmdd': '20190406', 'current_week_num_yyyy_mm': '2019-14', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'current_week_num_yyyymm': '201914', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_yyyymm': '201904', 'december_month_last_year_yyyy_mm': '2018-12', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_yyyy_mm': '2019-04', 'last_weekday7_yyyymmdd': '20190331', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_last_year_yyyy_mm': '2018-04', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'curmonth_final_day_yyyymmdd': '20190430', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyy_mm_dd': '2019-04-01'}
2019-04-06 19:53:02,214 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：[
  {
    "模式": "curtime",
    "消息": "fail#请求失败"
  }
]
2019-04-06 19:53:02,215 unittesttestcase.py[line: 38] INFO: 正在替换“校验模式”中的插件函数
2019-04-06 19:53:02,245 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:53:02,247 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:53:02,248 unittesttestcase.py[line: 82] INFO: 校验规则为：“包含字符串：curtime”
2019-04-06 19:53:02,252 test_plan.py[line: 49] INFO: ======================开始运行测试用例[名称：ID4-N_获取时间和日期, ID:4]======================
2019-04-06 19:53:02,253 test_case.py[line: 32] INFO: 正在查询测试用例[ID：4, 名称：ID4-N_获取时间和日期]关联的测试步骤
2019-04-06 19:53:02,254 mydb.py[line: 152] INFO: query：SELECT id, `order`, step_type, op_object, object_id, exec_operation, request_header, request_method, url_or_sql, input_params, response_to_check, check_rule, check_pattern,  output_params, protocol, host, port, run_times, try_for_failure, retry_frequency FROM `website_api_test_case_step`  WHERE case_id=%s AND  status='启用' ORDER BY `order` ASC  data：(4,)
2019-04-06 19:53:02,265 test_case.py[line: 41] INFO: 开始执行测试步骤
2019-04-06 19:53:02,267 test_case.py[line: 97] INFO: ======================开始执行测试用例步骤（第 1 步, 步骤ID： 2,  用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:53:02,269 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:53:02,270 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:53:02,270 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:53:02,271 test_case_step.py[line: 203] INFO: 正在替换“输入参数”中的动态参数
2019-04-06 19:53:02,272 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:53:02,273 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'millisecond_for_curtime': 1554551581000, 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'next_month_first_day_yyyymmdd': '20190501', 'december_month_last_year_yyyymm': '201812', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'yesterday_yyyymmdd': '20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_month_yyyy_mm': '2019-03', 'last_month_yyyymm': '201903', 'last_month_final_day_yyyymmdd': '20190331', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'current_month_last_year_yyyymm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'curtime': '2019-04-06 19:53:01', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curtime_puls10s': '2019-04-06 19:53:11', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'today_yyyymmdd': '20190406', 'current_week_num_yyyy_mm': '2019-14', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'current_week_num_yyyymm': '201914', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_yyyymm': '201904', 'december_month_last_year_yyyy_mm': '2018-12', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_yyyy_mm': '2019-04', 'last_weekday7_yyyymmdd': '20190331', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_last_year_yyyy_mm': '2018-04', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'curmonth_final_day_yyyymmdd': '20190430', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyy_mm_dd': '2019-04-01'}
2019-04-06 19:53:02,273 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：${__read_file("emailPic.png", "rb")}
2019-04-06 19:53:02,274 test_case_step.py[line: 206] INFO: 正在替换“输入参数”中的插件函数
2019-04-06 19:53:02,275 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:['${__read_file("emailPic.png", "rb")}']
2019-04-06 19:53:02,275 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:53:02,276 test_case_step.py[line: 141] INFO: 正在替换插件函数：${__read_file("emailPic.png", "rb")}
2019-04-06 19:53:02,285 pluginfunc.py[line: 31] INFO: 待读取的文件路径为：D:\interface_project_for_dev\testdata\emailPic.png
2019-04-06 19:53:02,287 test_case_step.py[line: 210] INFO: 正在替换“URL/SQL”中的动态参数
2019-04-06 19:53:02,289 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:53:02,290 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'millisecond_for_curtime': 1554551581000, 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'next_month_first_day_yyyymmdd': '20190501', 'december_month_last_year_yyyymm': '201812', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'yesterday_yyyymmdd': '20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_month_yyyy_mm': '2019-03', 'last_month_yyyymm': '201903', 'last_month_final_day_yyyymmdd': '20190331', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'current_month_last_year_yyyymm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'curtime': '2019-04-06 19:53:01', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curtime_puls10s': '2019-04-06 19:53:11', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'today_yyyymmdd': '20190406', 'current_week_num_yyyy_mm': '2019-14', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'current_week_num_yyyymm': '201914', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_yyyymm': '201904', 'december_month_last_year_yyyy_mm': '2018-12', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_yyyy_mm': '2019-04', 'last_weekday7_yyyymmdd': '20190331', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_last_year_yyyy_mm': '2018-04', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'curmonth_final_day_yyyymmdd': '20190430', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyy_mm_dd': '2019-04-01'}
2019-04-06 19:53:02,291 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：/action/getDateAndTime
2019-04-06 19:53:02,292 test_case_step.py[line: 213] INFO: 正在替换“URL/SQL”中的插件函数
2019-04-06 19:53:02,294 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:53:02,295 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:53:02,296 test_case_step.py[line: 218] INFO: 正在替换“主机地址”中的动态参数
2019-04-06 19:53:02,297 test_case_step.py[line: 68] INFO: 检查到目标内容中待替换的动态变量有:[]
2019-04-06 19:53:02,299 test_case_step.py[line: 69] INFO: 已保存的全局变量有：{'weekday1_to_weekday7_yyyy_mm_dd': '20190401-20190407', 'millisecond_for_curtime': 1554551581000, 'curmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'next_month_first_day_yyyymmdd': '20190501', 'december_month_last_year_yyyymm': '201812', 'weekday7_yyyy_mm_dd': '20190407', 'weekday1_yyyymmdd': '20190401', 'yesterday_yyyymmdd': '20190405', 'last_month_first_day_yyyy_mm_dd': '2019-03-01', 'curmonth_final_day_yyyy_mm_dd': '2019-04-30', 'pre_weekday7_yyyy_mm_dd': '2019-03-24', 'last_month_yyyy_mm': '2019-03', 'last_month_yyyymm': '201903', 'last_month_final_day_yyyymmdd': '20190331', 'curmonth_first_day_yyyymmdd': '20190401', 'pre_weekday1_yyyy_mm_dd': '2019-03-18', 'last_weekday1_yyyymmdd': '20190325', 'yesterday_yyyy_mm_dd': '2019-04-05', 'current_month_last_year_yyyymm': '2018-04', 'weekday1_yyyy_mm_dd': '20190401', 'curtime': '2019-04-06 19:53:01', 'recent_7day_range_yyyy_mm_dd': '2019-03-30-2019-04-05', 'curtime_puls10s': '2019-04-06 19:53:11', 'last_weekday1_yyyy_mm_dd': '2019-03-25', 'today_yyyymmdd': '20190406', 'current_week_num_yyyy_mm': '2019-14', 'curmonth_range_yyyymmdd': '20190401-20190430', 'last_weekday1_to_weekday7_yyyymmdd': '20190325-20190331', 'today_yyyy_mm_dd': '2019-04-06', 'lastmonth_range_yyyymmdd': '20190401-20190430', 'current_week_num_yyyymm': '201914', 'recent_7day_range_yyyymmdd': '20190330-20190405', 'last_month_first_day_yyyymmdd': '20190301', 'current_month_yyyymm': '201904', 'december_month_last_year_yyyy_mm': '2018-12', 'lastmonth_range_yyyy_mm_dd': '2019-04-01-2019-04-30', 'last_week_num_yyyyno': '201913', 'weekday7_yyyymmdd': '20190407', 'pre_weekday7_yyyymmdd': '20190324', 'pre_weekday1_yyyymmdd': '20190318', 'last_month_final_day_yyyy_mm_dd': '2019-03-31', 'next_month_first_day_yyyy_mm_dd': '2019-05-01', 'recent_30day_range_yyyy_mm_dd': '20190307-20190405', 'current_month_yyyy_mm': '2019-04', 'last_weekday7_yyyymmdd': '20190331', 'millisecond_for_yesterday': 1554393600000, 'last_weekday7_yyyy_mm_dd': '2019-03-31', 'weekday1_to_weekday7_yyyymmdd': '20190401-20190407', 'current_month_last_year_yyyy_mm': '2018-04', 'recent_30day_range_yyyymmdd': '2019-03-07-2019-04-05', 'last_weekday1_to_weekday7_yyyy_mm_dd': '2019-03-25-2019-03-31', 'curmonth_final_day_yyyymmdd': '20190430', 'millisecond_for_curdate': 1554480000000, 'curmonth_first_day_yyyy_mm_dd': '2019-04-01'}
2019-04-06 19:53:02,301 test_case_step.py[line: 78] INFO: 替换动态变量后的内容：192.168.0.103
2019-04-06 19:53:02,302 test_case_step.py[line: 221] INFO: 正在替换“主机地址”中的插件函数
2019-04-06 19:53:02,303 test_case_step.py[line: 138] INFO: 检查到目标内容中待替换的插件函数有:[]
2019-04-06 19:53:02,305 test_case_step.py[line: 139] INFO: 支持的插件函数有：['__base64encode', '__read_file']
2019-04-06 19:53:02,308 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:53:05,315 test_case.py[line: 104] ERROR: 执行用例测试步骤失败，正在进行第 1 次重试（第 1 步, 步骤ID: 2, 用例ID：4, 用例名称：ID4-N_获取时间和日期）
2019-04-06 19:53:05,317 test_case_step.py[line: 163] INFO: 步骤类型：请求接口
2019-04-06 19:53:05,319 test_case_step.py[line: 164] INFO: 步骤操作对象：APIUnittestTestCase
2019-04-06 19:53:05,321 test_case_step.py[line: 165] INFO: 执行操作：test_api_for_json
2019-04-06 19:53:05,324 APIUnittestTestCase.py[line: 140] INFO: 正在发起GET请求...
2019-04-06 19:53:05,333 test_case.py[line: 112] ERROR: 执行用例测试步骤运行失败（第 1 步, 步骤ID: 2， 用例ID：4, 用例名称：ID4-N_获取时间和日期）======================
2019-04-06 19:53:05,335 running_plan.py[line: 107] INFO: 正在释放资源
2019-04-06 19:53:05,336 running_plan.py[line: 108] INFO: 正在断开与项目关联的数据库连接
2019-04-06 19:53:05,337 running_plan.py[line: 114] INFO: 正在清理与项目关联的全局变量
